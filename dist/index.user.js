// ==UserScript==
// @name               genshinSeelieEx
// @name:zh            原神规划助手扩展
// @description        description
// @description:zh     个人想偷懒,不想手动在仙灵 - 原神规划助手 手动录入角色及其天赋,于是简单整理一个脚本,利用米游社养成计算器api获取角色信息,直接导入至seelie
// @include            https://seelie.inmagi.com/*
// @include            https://seelie.me/*
// @require            https://cdn.jsdelivr.net/npm/core-js-bundle@3.9.1/index.js
// @require            https://cdn.jsdelivr.net/npm/react@17.0.2/umd/react.production.min.js
// @require            https://cdn.jsdelivr.net/npm/react-dom@17.0.2/umd/react-dom.production.min.js
// @require            https://cdn.jsdelivr.net/npm/react-bootstrap@2.0.3/dist/react-bootstrap.min.js
// @require            https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.js
// @require            https://cdn.jsdelivr.net/npm/react-draggable@4.4.4/build/web/react-draggable.min.js
// @connect            api-takumi.mihoyo.com
// @connect            api-os-takumi.mihoyo.com
// @connect            sg-public-api.mihoyo.com
// @grant              unsafeWindow
// @grant              GM_setValue
// @grant              GM_download
// @grant              GM_xmlhttpRequest
// @grant              GM_openInTab
// @grant              GM_getResourceText
// @grant              GM_addStyle
// @resource           character    https://cdn.jsdelivr.net/gh/KeyPJ/seelieEx@main/src/data/character.json
// @resource           weapon    https://cdn.jsdelivr.net/gh/KeyPJ/seelieEx@main/src/data/weapon.json
// @resource           css    https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css
// @author             KeyPJ
// @namespace          https://github.com/KeyPJ/seelieEx
// @version            2.2.0
// @run-at             document-end
// @homepage           https://github.com/KeyPJ
// @homepageURL        https://github.com/KeyPJ/seelieEx
// @updateURL          https://cdn.jsdelivr.net/gh/KeyPJ/seelieEx@main/dist/index.user.js
// @copyright          2021, KeyPJ https://github.com/KeyPJ
// @license            MIT
// @contributionURL    https://github.com/KeyPJ/seelieEx
// ==/UserScript==

(()=>{var e={669:(e,t,n)=>{e.exports=n(609)},448:(e,t,n)=>{"use strict";var r=n(867),o=n(26),a=n(372),s=n(327),i=n(97),c=n(109),l=n(985),u=n(61),f=n(655),p=n(263);e.exports=function(e){return new Promise((function(t,n){var d,m=e.data,h=e.headers,v=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}r.isFormData(m)&&delete h["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",x=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";h.Authorization="Basic "+btoa(b+":"+x)}var E=i(e.baseURL,e.url);function w(){if(y){var r="getAllResponseHeaders"in y?c(y.getAllResponseHeaders()):null,a={data:v&&"text"!==v&&"json"!==v?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};o((function(e){t(e),g()}),(function(e){n(e),g()}),a),y=null}}if(y.open(e.method.toUpperCase(),s(E,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=w:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(w)},y.onabort=function(){y&&(n(u("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){n(u("Network Error",e,null,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||f.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(u(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var A=(e.withCredentials||l(E))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;A&&(h[e.xsrfHeaderName]=A)}"setRequestHeader"in y&&r.forEach(h,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete h[t]:y.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),v&&"json"!==v&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){y&&(n(!e||e&&e.type?new p("canceled"):e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),m||(m=null),y.send(m)}))}},609:(e,t,n)=>{"use strict";var r=n(867),o=n(849),a=n(321),s=n(185),i=function e(t){var n=new a(t),i=o(a.prototype.request,n);return r.extend(i,a.prototype,n),r.extend(i,n),i.create=function(n){return e(s(t,n))},i}(n(655));i.Axios=a,i.Cancel=n(263),i.CancelToken=n(972),i.isCancel=n(502),i.VERSION=n(288).version,i.all=function(e){return Promise.all(e)},i.spread=n(713),i.isAxiosError=n(268),e.exports=i,e.exports.default=i},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),o=n(327),a=n(782),s=n(572),i=n(185),c=n(875),l=c.validators;function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=i(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&c.assertOptions(n,{silentJSONParsing:l.transitional(l.boolean),forcedJSONParsing:l.transitional(l.boolean),clarifyTimeoutError:l.transitional(l.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var a,u=[];if(this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)})),!o){var f=[s,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(u),a=Promise.resolve(t);f.length;)a=a.then(f.shift(),f.shift());return a}for(var p=t;r.length;){var d=r.shift(),m=r.shift();try{p=d(p)}catch(e){m(e);break}}try{a=s(p)}catch(e){return Promise.reject(e)}for(;u.length;)a=a.then(u.shift(),u.shift());return a},u.prototype.getUri=function(e){return e=i(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(i(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(i(r||{},{method:e,url:t,data:n}))}})),e.exports=u},782:(e,t,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,n)=>{"use strict";var r=n(793),o=n(303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},61:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var s=new Error(e);return r(s,t,n,o,a)}},572:(e,t,n)=>{"use strict";var r=n(867),o=n(527),a=n(502),s=n(655),i=n(263);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new i("canceled")}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return c(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(c(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function a(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function s(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function c(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var l={url:s,method:s,data:s,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:c};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=l[e]||a,o=t(e);r.isUndefined(o)&&t!==c||(n[e]=o)})),n}},26:(e,t,n)=>{"use strict";var r=n(61);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),o=n(655);e.exports=function(e,t,n){var a=this||o;return r.forEach(n,(function(n){e=n.call(a,e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),o=n(16),a=n(481),s={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,l={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(448)),c),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(i(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||l.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,s=!n&&"json"===this.responseType;if(s||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(s){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(s)})),e.exports=l},288:e=>{e.exports={version:"0.26.0"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),a=s.join("&")}if(a){var i=e.indexOf("#");-1!==i&&(e=e.slice(0,i)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,s){var i=[];i.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),r.isString(o)&&i.push("path="+o),r.isString(a)&&i.push("domain="+a),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,s={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},875:(e,t,n)=>{"use strict";var r=n(288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,s){if(!1===e)throw new Error(o(r," has been removed"+(t?" in "+t:"")));return t&&!a[r]&&(a[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,s)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],s=t[a];if(s){var i=e[a],c=void 0===i||s(i,a,e);if(!0!==c)throw new TypeError("option "+a+" must be "+c)}else if(!0!==n)throw Error("Unknown option "+a)}},validators:o}},867:(e,t,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function a(e){return Array.isArray(e)}function s(e){return void 0===e}function i(e){return"[object ArrayBuffer]"===o.call(e)}function c(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function f(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:i,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===o.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&i(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:l,isUndefined:s,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return c(e)&&u(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===o.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)f(arguments[r],n);return t},extend:function(e,t,n){return f(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},87:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),s=n.n(a)()(o());s.push([e.id,"\n.float-btn {\n    position: fixed;\n    bottom: 30%;\n    left: 15px;\n    width: 60px;\n    height: 60px;\n    background: black;\n    opacity: 0.75;\n    color: white;\n    text-align: center;\n    line-height: 60px;\n    cursor: pointer;\n    z-index:1201\n}\n\n.ex-dialog{\n    position: fixed;\n    top: 100px;\n    left: 30%;\n    width: 600px;\n    height: 600px;\n    background: rgba(30,41,59);\n    opacity: 0.75;\n    color: white;\n    text-align: center;\n    line-height: 60px;\n    z-index:1200\n}\n","",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:";AACA;IACI,eAAe;IACf,WAAW;IACX,UAAU;IACV,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf;AACJ;;AAEA;IACI,eAAe;IACf,UAAU;IACV,SAAS;IACT,YAAY;IACZ,aAAa;IACb,0BAA0B;IAC1B,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB;AACJ",sourcesContent:["\n.float-btn {\n    position: fixed;\n    bottom: 30%;\n    left: 15px;\n    width: 60px;\n    height: 60px;\n    background: black;\n    opacity: 0.75;\n    color: white;\n    text-align: center;\n    line-height: 60px;\n    cursor: pointer;\n    z-index:1201\n}\n\n.ex-dialog{\n    position: fixed;\n    top: 100px;\n    left: 30%;\n    width: 600px;\n    height: 600px;\n    background: rgba(30,41,59);\n    opacity: 0.75;\n    color: white;\n    text-align: center;\n    line-height: 60px;\n    z-index:1200\n}\n"],sourceRoot:""}]);const i=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&s[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],u=a[l]||0,f="".concat(l," ").concat(u);a[l]=u+1;var p=n(f),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var m=o(d,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:m,references:1})}s.push(f)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=n(a[s]);t[i].references--}for(var c=r(e,o),l=0;l<a.length;l++){var u=n(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=React;var t=n.n(e);const r=ReactDOM;var o=n.n(r);const a=ReactDraggable;var s=n.n(a),i=n(379),c=n.n(i),l=n(795),u=n.n(l),f=n(569),p=n.n(f),d=n(565),m=n.n(d),h=n(216),v=n.n(h),g=n(589),y=n.n(g),b=n(87),x={};x.styleTagTransform=y(),x.setAttributes=m(),x.insert=p().bind(null,"head"),x.domAPI=u(),x.insertStyleElement=v(),c()(b.Z,x),b.Z&&b.Z.locals&&b.Z.locals;const E=ReactBootstrap,w=JSON.parse(GM_getResourceText("character")),A=JSON.parse(GM_getResourceText("weapon"));GM_addStyle(GM_getResourceText("css"));const C=w.length,S=[{element_attr_id:1,name:"pyro"},{element_attr_id:2,name:"anemo"},{element_attr_id:3,name:"geo"},{element_attr_id:4,name:"electro"},{element_attr_id:5,name:"hydro"},{element_attr_id:6,name:"cryo"},{element_attr_id:7,name:"dendro"}],k=()=>vue.goals,O=()=>Object.keys(vue.inactive)||[],T=e=>{vue.addGoal(e)},j=(e,t,n,r)=>{let o=k();const a=o.map((e=>e.id)),s=Math.max(...a)+1||1,i=o.findIndex("character"==r?e=>e.type==r&&e.character==t:e=>e.type==r&&e.weapon==t),c=R(e);let l;if(i<0)l="character"==r?{type:r,character:t,current:c,goal:c,id:s}:{type:r,character:"",weapon:t,current:c,goal:c,id:s};else{const e=o[i],{goal:t,current:n}=e,{level:r,asc:a}=n,{level:s,asc:u}=t,{level:f,asc:p}=c;l=Object.assign(Object.assign({},e),{current:f>=r&&p>=a?c:n,goal:f>=s&&p>=u?c:t})}T(l)};const _=[{level:1,asc:0,text:"1"},{level:20,asc:0,text:"20"},{level:20,asc:1,text:"20 A"},{level:40,asc:1,text:"40"},{level:40,asc:2,text:"40 A"},{level:50,asc:2,text:"50"},{level:50,asc:3,text:"50 A"},{level:60,asc:3,text:"60"},{level:60,asc:4,text:"60 A"},{level:70,asc:4,text:"70"},{level:70,asc:5,text:"70 A"},{level:80,asc:5,text:"80"},{level:80,asc:6,text:"80 A"},{level:90,asc:6,text:"90"}],R=e=>{let t=_[0];if(e<20)return t;for(let n of _){const{level:r}=n;if(e<r)return t;if(e==r)return n;e>r&&(t=n)}return t},N=(e,t)=>{const{current:n}=e,{level:r,asc:o}=n,{level:a,asc:s}=t,i=Object.assign(Object.assign({},e),{goal:a>=r&&s>=o?t:n});T(i)},B=function(){const[n,r]=(0,e.useState)((()=>!0)),[o,a]=(0,e.useState)((()=>_[0]));return t().createElement("div",null,t().createElement(E.Row,null,t().createElement(E.Col,null,"批量设置角色目标信息",t().createElement(E.ToggleButton,{className:"mb-2",id:"toggle-check-character",type:"checkbox",variant:"outline-primary",checked:n,value:"0",onChange:e=>r(e.currentTarget.checked)},"仅激活角色"))),t().createElement(E.Row,null,t().createElement(E.Col,null,"角色目标等级:",t().createElement(E.Form.Select,{onChange:e=>{a(_[e.target.value])},defaultValue:0,className:"character-level-goal-select"},_.map(((e,n)=>t().createElement("option",{value:n,key:n},e.text.replace("A","破")))))),t().createElement(E.Col,null,t().createElement(E.Button,{onClick:()=>{var e,t;console.log("批量设置角色目标等级"),console.log(n),console.log(o),e=!n,t=o,k().filter((e=>"character"==e.type)).filter((t=>e||!O().includes(t.character))).map((e=>N(e,t))),alert("角色目标等级设置完毕")}},"批量设置角色目标等级"))))},I=function(){const[n,r]=(0,e.useState)((()=>!0)),[o,a]=(0,e.useState)({normal:1,skill:1,burst:1}),s=[1,2,3,4,5,6,7,8,9,10];return t().createElement("div",null,t().createElement(E.Row,null,t().createElement(E.Col,null,"批量设置角色目标天赋",t().createElement(E.ToggleButton,{className:"mb-2",id:"toggle-check-talent",type:"checkbox",variant:"outline-primary",checked:n,value:"0",onChange:e=>r(e.currentTarget.checked)},"仅激活角色"))),t().createElement(E.Row,null,t().createElement(E.Col,null,"普通攻击目标等级:",t().createElement(E.Form.Select,{onChange:e=>a(Object.assign(Object.assign({},o),{normal:+e.target.value})),className:"character-level-goal-select"},s.map((e=>t().createElement("option",{value:e,key:e},e))))),t().createElement(E.Col,null,"元素战技目标等级:",t().createElement(E.Form.Select,{onChange:e=>a(Object.assign(Object.assign({},o),{skill:+e.target.value})),className:"character-level-goal-select"},s.map((e=>t().createElement("option",{value:e,key:e},e))))),t().createElement(E.Col,null,"元素爆发目标等级:",t().createElement(E.Form.Select,{onChange:e=>a(Object.assign(Object.assign({},o),{burst:+e.target.value})),className:"character-level-goal-select"},s.map((e=>t().createElement("option",{value:e,key:e},e))))),t().createElement(E.Col,null,t().createElement(E.Button,{onClick:()=>{console.log("批量设置角色目标天赋"),console.log(o);const{normal:e,skill:t,burst:r}=o;console.log(n),((e,t,n,r)=>{k().filter((e=>"talent"==e.type)).filter((t=>e||!O().includes(t.character))).map((e=>((e,t=9,n=9,r=9)=>{const{normal:{current:o},skill:{current:a},burst:{current:s}}=e,i=Object.assign(Object.assign({},e),{normal:{current:o,goal:o>t?o:t},skill:{current:a,goal:a>n?a:n},burst:{current:s,goal:s>r?s:r}});T(i)})(e,t,n,r)))})(!n,e,t,r),alert("角色目标天赋设置完毕")}},"批量设置角色目标天赋"))))},U=function(){const[n,r]=(0,e.useState)((()=>!0)),[o,a]=(0,e.useState)((()=>_[0]));return t().createElement("div",null,t().createElement(E.Row,null,t().createElement(E.Col,null,"批量设置武器目标信息",t().createElement(E.ToggleButton,{className:"mb-2",id:"toggle-check-weapon",type:"checkbox",variant:"outline-primary",checked:n,value:"0",onChange:e=>r(e.currentTarget.checked)},"仅激活武器"))),t().createElement(E.Row,null,t().createElement(E.Col,null,"武器目标等级:",t().createElement(E.Form.Select,{onChange:e=>{a(_[e.target.value])},defaultValue:0,className:"weapon-level-goal-select"},_.map(((e,n)=>t().createElement("option",{value:n,key:n},e.text.replace("A","破")))))),t().createElement(E.Col,null,t().createElement(E.Button,{onClick:()=>{var e,t;console.log("批量设置武器目标等级"),console.log(o),e=!n,t=o,k().filter((e=>"weapon"==e.type)).filter((t=>e||!O().includes(t.weapon))).map((e=>N(e,t))),alert("武器目标等级设置完毕")}},"批量设置武器目标等级"))))};var P=n(97),L=n.n(P),M=n(61),q=n.n(M),z=n(26),D=n.n(z),F=n(327),J=n.n(F),G=n(109),H=n.n(G),$=n(867),X=n.n($),V=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function s(e){try{c(r.next(e))}catch(e){a(e)}}function i(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((r=r.apply(e,t||[])).next())}))},W=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}};const Z="https://webstatic.mihoyo.com/ys/event/e20210928review/index.html",K="https://webstatic-sea.mihoyo.com/ys/event/e20210928review/index.html",Y=n(669);Y.defaults.adapter=function(e){return new Promise(((t,n)=>{let r=e.data;const o=e.headers??{};if(X().isFormData(r)&&delete o["Content-Type"],e.auth){const t=e.auth.username||"",n=e.auth.password||"";o.Authorization="Basic "+btoa(t+":"+n)}X().forEach(o,(function(e,t){void 0===r&&"content-type"===t.toLowerCase()&&delete o[t]})),void 0===r&&(r=null);e.cancelToken&&e.cancelToken.promise.then((function(e){n(e)}));const a=e.method.toUpperCase();"UNLINK"===a||"PURGE"===a||"LINK"===a?n(q()(`${a} is not a supported method by GM.xmlHttpRequest`,e)):GM.xmlHttpRequest({method:a,url:J()(L()(e.baseURL,e.url),e.params,e.paramsSerializer),headers:Object.fromEntries(Object.entries(o).map((([e,t])=>[e,t.toString()]))),data:r,timeout:e.timeout,ontimeout:function(){n(q()("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED"))},onload:function(r){const o="responseHeaders"in r?H()(r.responseHeaders):{},a={data:e.responseType&&"text"!==e.responseType?r.response:r.responseText,status:r.status,statusText:r.statusText,headers:o,config:e,request:{responseURL:r.finalUrl,status:r.status,statusText:r.statusText,responseXML:null}};D()(t,n,a)},onerror:function(){n(q()("Network Error",e))}})}))},Y.defaults.withCredentials=!0,window.GM.xmlHttpRequest=GM_xmlhttpRequest;const Q=e=>e.then((e=>[null,e])).catch((e=>[e])),ee=()=>"hk4e_global"==localStorage.getItem("gameBiz"),te=(e,t,n=1)=>V(void 0,void 0,void 0,(function*(){let r=ee()?"https://sg-public-api.mihoyo.com/event/calculateos/sync/avatar/list":"https://api-takumi.mihoyo.com/event/e20200928calculate/v1/sync/avatar/list";const[o,a]=yield Q(Y.post(r,JSON.stringify({element_attr_ids:[],weapon_cat_ids:[],page:n,size:50,uid:e,region:t,lang:"zh-cn"})));if(!o){const{status:e,data:t}=yield a;if(console.log(a),200==e){const{retcode:e,data:n}=t;if(0===e){const{list:e}=yield n;return e}}}throw alert("请确认已登录活动页面且绑定原神账户!"),GM_openInTab(ee()?K:Z),o||new Error("角色列表获取失败")})),ne=function(){const[n,r]=(0,e.useState)("hk4e_cn"),o=e=>{r(e.currentTarget.value),localStorage.setItem("gameBiz",e.currentTarget.value)},[a,s]=(0,e.useState)([]),[i,c]=(0,e.useState)(),[l,u]=(0,e.useState)("character");return t().createElement("div",{className:"ex-dialog"},"这里是SeelieEX操作界面",t().createElement(E.Row,null,t().createElement(E.Col,null,"区服选择:"),t().createElement(E.Col,null,t().createElement(E.ButtonGroup,null,[{name:"国服(含渠道",value:"hk4e_cn"},{name:"国际服",value:"hk4e_global"}].map(((e,r)=>t().createElement(E.ToggleButton,{key:r,id:`radio-${r}`,type:"radio",variant:r%2?"outline-success":"outline-danger",name:"radio",value:e.value,checked:n===e.value,onChange:o},e.name))))),t().createElement(E.Col,null,t().createElement(E.Button,{onClick:()=>{V(void 0,void 0,void 0,(function*(){const[e,t]=yield Q(Y.get(ee()?"https://api-os-takumi.mihoyo.com/binding/api/getUserGameRolesByLtoken?game_biz=hk4e_global":"https://api-takumi.mihoyo.com/binding/api/getUserGameRolesByCookie?game_biz=hk4e_cn"));if(!e){const{status:e,data:n}=yield t;if(200==e){const{retcode:e,data:t}=n;if(0===e){const{list:e}=yield t;return e}}}throw alert("请确认已登录活动页面且绑定原神账户!"),GM_openInTab(ee()?K:Z),e||new Error("账户信息获取失败")})).then((e=>{const t=e;s(t),t.length>0&&c(t[0])})).catch((e=>{console.error(e),console.error("账户信息获取失败"),alert("账户信息获取失败")}))}},"获取账户信息"))),t().createElement(E.Row,null,t().createElement(E.Col,null,"账户选择:"),t().createElement(E.Col,null,t().createElement(E.Form.Select,{onChange:e=>{c(a[e.target.value])},className:"role-select"},a.map(((e,n)=>t().createElement("option",{value:n,key:n},e.game_uid,"(",e.region,")"))))),t().createElement(E.Col,null,t().createElement(E.Button,{onClick:()=>{if(!i)return console.error("账户信息获取失败"),void alert("账户信息获取失败");console.log("开始同步角色信息");const{game_uid:e,region:t}=i;((e,t)=>V(void 0,void 0,void 0,(function*(){var n,r,o,a;let s=Math.ceil(C/50),i=Array.from(new Array(s).keys());const c=[];try{for(var l,u=W(i);!(l=yield u.next()).done;){let n=l.value;c.push.apply(c,yield te(e,t,n+1))}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=u.return)&&(yield r.call(u))}finally{if(n)throw n.error}}const f=c.map((n=>((e,t,n)=>V(void 0,void 0,void 0,(function*(){const{id:r}=e,o=`?avatar_id=${r}&uid=${t}&region=${n}&lang=zh-cn`;let a=ee()?"https://sg-public-api.mihoyo.com/event/calculateos/sync/avatar/detail":"https://api-takumi.mihoyo.com/event/e20200928calculate/v1/sync/avatar/detail";const[s,i]=yield Q(Y.get(a+o));if(!s){const{status:t,data:n}=yield i;if(200==t){const{retcode:t,data:r}=n;if(0===t){const t=yield r;return Object.assign({character:e},t)}}}throw s||new Error("角色详情获取失败")})))(n,e,t))),p=[];try{for(var d,m=W(f);!(d=yield m.next()).done;){let e=d.value;p.push(e)}}catch(e){o={error:e}}finally{try{d&&!d.done&&(a=m.return)&&(yield a.call(m))}finally{if(o)throw o.error}}return p})))(e,t).then((e=>{console.group("返回数据"),console.groupCollapsed("角色"),console.table(e.map((e=>e.character))),console.groupEnd(),console.groupCollapsed("武器"),console.table(e.map((e=>e.weapon))),console.groupEnd(),console.groupCollapsed("角色天赋"),e.forEach((e=>{const t=e.character.name;console.groupCollapsed(t),console.table(e.skill_list),console.groupEnd()})),console.groupEnd(),console.groupEnd(),e.forEach((e=>{!function(e){const{character:t,skill_list:n,weapon:r}=e,{name:o,element_attr_id:a}=t;if(r){const{name:e,level_current:t}=r,n=(e=>{for(let t of A){const{id:n,name:r}=t;if(e==r)return n}return console.error(`getWeaponrId ${e} 查询失败`),""})(e);n&&j(t,n,0,"weapon")}const{level_current:s}=t,i=(e=>{for(let t of w){const{id:n,name:r}=t;if(e==r)return n}return console.error(`getCharacterId ${e} 查询失败`),""})(o);if(!i)return;j(s,i,0,"character");let c=i;if("traveler"==i){const e=(e=>{for(let t of S){const{element_attr_id:n,name:r}=t;if(e==n)return r}return console.error(`getElementAttrName: ${e} 查询失败`),""})(a);c=`traveler_${e}`}((e,t)=>{const n=k(),r=n.map((e=>e.id)),o=Math.max(...r)+1||1,a=n.findIndex((t=>"talent"==t.type&&t.character==e)),[s,i,c]=t.filter((e=>10==e.max_level)).sort().map((e=>e.level_current));let l;if(a<0)l={type:"talent",character:e,c3:!1,c5:!1,normal:{current:s,goal:s},skill:{current:i,goal:i},burst:{current:c,goal:c},id:o};else{const e=n[a],{normal:t,skill:r,burst:o}=e,{goal:u}=t,{goal:f}=r,{goal:p}=o;l=Object.assign(Object.assign({},e),{normal:{current:s,goal:s>u?s:u},skill:{current:i,goal:i>f?i:f},burst:{current:c,goal:c>p?c:p}})}T(l)})(c,n)}(e)})),console.log("米游社数据无法判断是否突破,请自行比较整数等级是否已突破"),console.log("角色信息同步完毕"),alert("角色信息同步完毕")}))}},"同步mihoyo角色信息"))),t().createElement(E.Row,null,t().createElement(E.Col,null,t().createElement(E.Tabs,{id:"controlled-tab-example",activeKey:l,onSelect:e=>u(e),className:"mb-3"},t().createElement(E.Tab,{eventKey:"character",title:"批量设置角色目标等级"},t().createElement(B,null)),t().createElement(E.Tab,{eventKey:"talent",title:"批量设置角色目标天赋"},t().createElement(I,null)),t().createElement(E.Tab,{eventKey:"weapon",title:"批量设置武器目标等级"},t().createElement(U,null))))))};var re;let oe=document.createElement("div");oe.id="seelieEx",oe.className="flex",null===(re=document.getElementById("app"))||void 0===re||re.append(oe),o().render(t().createElement(t().StrictMode,null,t().createElement((function(){const[n,r]=(0,e.useState)((()=>!1)),o=t().useRef(null);return t().createElement("div",{className:"App"},t().createElement(s(),{nodeRef:o},t().createElement("div",{ref:o,className:"float-btn",onClick:()=>r(!n)},"SeelieEX")),t().createElement("div",{style:{display:n?"":"none"}},t().createElement(ne,null)))}),null)),document.getElementById("seelieEx"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,