// ==UserScript==
// @name               genshinSeelieEx
// @name:zh            原神规划助手扩展
// @description        description
// @description:zh     个人想偷懒,不想手动在仙灵 - 原神规划助手 手动录入角色及其天赋,于是简单整理一个脚本,利用米游社养成计算器api获取角色信息,直接导入至seelie
// @include            https://seelie.inmagi.com/*
// @include            https://seelie.me/*
// @require            https://cdn.jsdelivr.net/npm/core-js-bundle@3.9.1/index.js
// @require            https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js
// @require            https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js
// @require            https://cdn.jsdelivr.net/npm/react-bootstrap@next/dist/react-bootstrap.min.js
// @require            https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.js
// @grant              unsafeWindow
// @grant              GM_setValue
// @grant              GM_download
// @grant              GM_xmlhttpRequest
// @grant              GM_openInTab
// @grant              GM_getResourceText
// @grant              GM_addStyle
// @resource           character    https://cdn.jsdelivr.net/gh/KeyPJ/seelieEx@main/src/data/character.json
// @resource           weapon    https://cdn.jsdelivr.net/gh/KeyPJ/seelieEx@main/src/data/weapon.json
// @resource           css    https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css
// @author             KeyPJ
// @namespace          https://github.com/KeyPJ/seelieEx
// @icon               https://seelie.inmagi.com/img/icons/favicon-32x32.png
// @version            2.0.0
// @connect            api-takumi.mihoyo.com
// @run-at             document-end
// @homepage           https://github.com/KeyPJ
// @homepageURL        https://github.com/KeyPJ/seelieEx
// @copyright          2021, KeyPJ https://github.com/KeyPJ
// @license            MIT
// @contributionURL    https://github.com/KeyPJ/seelieEx
// ==/UserScript==

/*! For license information please see index.user.js.LICENSE.txt */
(()=>{var e={184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var l=a.apply(null,n);l&&e.push(l)}}else if("object"===o)if(n.toString===Object.prototype.toString)for(var i in n)r.call(n,i)&&n[i]&&e.push(i);else e.push(n.toString())}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()},10:(e,t,n)=>{"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}n.r(t),n.d(t,{default:()=>a})},87:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),l=n.n(o)()(a());l.push([e.id,"\r\n.float-btn {\r\n    position: fixed;\r\n    bottom: 30%;\r\n    left: 15px;\r\n    width: 60px;\r\n    height: 60px;\r\n    background: black;\r\n    opacity: 0.75;\r\n    color: white;\r\n    text-align: center;\r\n    line-height: 60px;\r\n    cursor: pointer;\r\n    z-index:1201\r\n}\r\n\r\n.ex-dialog{\r\n    position: fixed;\r\n    top: 100px;\r\n    left: 30%;\r\n    width: 600px;\r\n    height: 600px;\r\n    background: rgba(30,41,59);\r\n    opacity: 0.75;\r\n    color: white;\r\n    text-align: center;\r\n    line-height: 60px;\r\n    z-index:1200\r\n}\r\n","",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:";AACA;IACI,eAAe;IACf,WAAW;IACX,UAAU;IACV,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf;AACJ;;AAEA;IACI,eAAe;IACf,UAAU;IACV,SAAS;IACT,YAAY;IACZ,aAAa;IACb,0BAA0B;IAC1B,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB;AACJ",sourcesContent:["\r\n.float-btn {\r\n    position: fixed;\r\n    bottom: 30%;\r\n    left: 15px;\r\n    width: 60px;\r\n    height: 60px;\r\n    background: black;\r\n    opacity: 0.75;\r\n    color: white;\r\n    text-align: center;\r\n    line-height: 60px;\r\n    cursor: pointer;\r\n    z-index:1201\r\n}\r\n\r\n.ex-dialog{\r\n    position: fixed;\r\n    top: 100px;\r\n    left: 30%;\r\n    width: 600px;\r\n    height: 600px;\r\n    background: rgba(30,41,59);\r\n    opacity: 0.75;\r\n    color: white;\r\n    text-align: center;\r\n    line-height: 60px;\r\n    z-index:1200\r\n}\r\n"],sourceRoot:""}]);const i=l},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),l=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(l).concat([o]).join("\n")}return[t].join("\n")}},143:e=>{"use strict";e.exports=function(e,t,n,r,a,o,l,i){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,o,l,i],c=0;(u=new Error(t.replace(/%s/g,(function(){return s[c++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var l,i,u=a(e),s=1;s<arguments.length;s++){for(var c in l=Object(arguments[s]))n.call(l,c)&&(u[c]=l[c]);if(t){i=t(l);for(var f=0;f<i.length;f++)r.call(l,i[f])&&(u[i[f]]=l[i[f]])}}return u}},391:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];function r(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var a=null;return t.forEach((function(e){if(null==a){var t=e.apply(void 0,n);null!=t&&(a=t)}})),a}return(0,a.default)(r)};var r,a=(r=n(613))&&r.__esModule?r:{default:r};e.exports=t.default},613:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,n,r,a,o,l){var i=a||"<<anonymous>>",u=l||r;if(null==n[r])return t?new Error("Required "+o+" `"+u+"` was not specified in `"+i+"`."):null;for(var s=arguments.length,c=Array(s>6?s-6:0),f=6;f<s;f++)c[f-6]=arguments[f];return e.apply(void 0,[n,r,i,o,u].concat(c))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n},e.exports=t.default},703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,l){if(l!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),a=n(418),o=n(840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(l(227));var i=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)i.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function v(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(h,e)||!p.call(m,e)&&(d.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,C=60108,_=60114,O=60109,N=60110,P=60112,T=60113,j=60120,D=60115,M=60116,R=60121,L=60128,I=60129,A=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),x=F("react.portal"),S=F("react.fragment"),C=F("react.strict_mode"),_=F("react.profiler"),O=F("react.provider"),N=F("react.context"),P=F("react.forward_ref"),T=F("react.suspense"),j=F("react.suspense_list"),D=F("react.memo"),M=F("react.lazy"),R=F("react.block"),F("react.scope"),L=F("react.opaque.id"),I=F("react.debug_trace_mode"),A=F("react.offscreen"),z=F("react.legacy_hidden")}var U,$="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=$&&e[$]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i])return"\n"+a[l].replace(" at new "," at ")}while(1<=l&&0<=i);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function K(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case _:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case D:return Y(e.type);case R:return Y(e._render);case M:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function le(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function se(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ve=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ee=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Oe=null,Ne=null;function Pe(e){if(e=Jr(e)){if("function"!=typeof _e)throw Error(l(280));var t=e.stateNode;t&&(t=ta(t),_e(e.stateNode,e.type,t))}}function Te(e){Oe?Ne?Ne.push(e):Ne=[e]:Oe=e}function je(){if(Oe){var e=Oe,t=Ne;if(Ne=Oe=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function De(e,t){return e(t)}function Me(e,t,n,r,a){return e(t,n,r,a)}function Re(){}var Le=De,Ie=!1,Ae=!1;function ze(){null===Oe&&null===Ne||(Re(),je())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ta(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ue=!1;if(f)try{var $e={};Object.defineProperty($e,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",$e,$e),window.removeEventListener("test",$e,$e)}catch(he){Ue=!1}function Be(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,We=null,He=!1,Ke=null,Ye={onError:function(e){Ve=!0,We=e}};function Qe(e,t,n,r,a,o,l,i,u){Ve=!1,We=null,Be.apply(Ye,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Xe(e)!==e)throw Error(l(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Ge(a),e;if(o===r)return Ge(a),t;o=o.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}if(!i){for(u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,ot=[],lt=null,it=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function ht(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=pt(t,n,r,a,o),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function vt(e){var t=Zr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(at=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==lt&&gt(lt)&&(lt=null),null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<ot.length){wt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&wt(lt,e),null!==it&&wt(it,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},St={},Ct={};function _t(e){if(St[e])return St[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return St[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Ot=_t("animationend"),Nt=_t("animationiteration"),Pt=_t("animationstart"),Tt=_t("transitionend"),jt=new Map,Dt=new Map,Mt=["abort","abort",Ot,"animationEnd",Nt,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Dt.set(r,t),jt.set(r,a),s(a,[r])}}(0,o.unstable_now)();var Lt=8;function It(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function At(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,a=0,o=e.expiredLanes,l=e.suspendedLanes,i=e.pingedLanes;if(0!==o)r=o,a=Lt=15;else if(0!=(o=134217727&n)){var u=o&~l;0!==u?(r=It(u),a=Lt):0!=(i&=o)&&(r=It(i),a=Lt)}else 0!=(o=n&~l)?(r=It(o),a=Lt):0!==i&&(r=It(i),a=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&l)){if(It(t),a<=Lt)return t;Lt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Vt(t)),r|=e[n],t&=~a;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(l(358,e))}function Ut(e){return e&-e}function $t(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,Kt=o.unstable_UserBlockingPriority,Yt=o.unstable_runWithPriority,Qt=!0;function Xt(e,t,n,r){Ie||Re();var a=Gt,o=Ie;Ie=!0;try{Me(a,e,t,n,r)}finally{(Ie=o)||ze()}}function qt(e,t,n,r){Yt(Kt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var a;if(Qt)if((a=0==(4&t))&&0<ot.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),ot.push(e);else{var o=Zt(e,t,n,r);if(null===o)a&&mt(e,r);else{if(a){if(-1<dt.indexOf(e))return e=pt(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return lt=ht(lt,e,t,n,r,a),!0;case"dragenter":return it=ht(it,e,t,n,r,a),!0;case"mouseover":return ut=ht(ut,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return st.set(o,ht(st.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ct.set(o,ht(ct.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;mt(e,r)}jr(e,t,r,null,n)}}}function Zt(e,t,n,r){var a=Ce(r);if(null!==(a=Zr(a))){var o=Xe(a);if(null===o)a=null;else{var l=o.tag;if(13===l){if(null!==(a=qe(o)))return a;a=null}else if(3===l){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return jr(e,t,r,a,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=a({},fn,{view:0,detail:0}),mn=ln(pn),hn=a({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(hn),gn=ln(a({},hn,{dataTransfer:0})),yn=ln(a({},pn,{relatedTarget:0})),bn=ln(a({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(a({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kn=ln(a({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function _n(){return Cn}var On=ln(a({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Nn=ln(a({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=ln(a({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Tn=ln(a({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),jn=ln(a({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Dn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,Rn=null;f&&"documentMode"in document&&(Rn=document.documentMode);var Ln=f&&"TextEvent"in window&&!Rn,In=f&&(!Mn||Rn&&8<Rn&&11>=Rn),An=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Wn(e,t,n,r){Te(r),0<(t=Mr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Kn=null;function Yn(e){Cr(e,0)}function Qn(e){if(G(ea(e)))return e}function Xn(e,t){if("change"===e)return t}var qn=!1;if(f){var Gn;if(f){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Gn=Zn}else Gn=!1;qn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),Kn=Hn=null)}function tr(e){if("value"===e.propertyName&&Qn(Kn)){var t=[];if(Wn(t,Kn,e,Ce(e)),e=Yn,Ie)e(t);else{Ie=!0;try{De(e,t)}finally{Ie=!1,ze()}}}}function nr(e,t,n){"focusin"===e?(er(),Kn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Kn)}function ar(e,t){if("click"===e)return Qn(t)}function or(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ir=Object.prototype.hasOwnProperty;function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ir.call(t,n[r])||!lr(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,vr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==hr||hr!==Z(r)||(r="selectionStart"in(r=hr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Mr(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Mt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<wr.length;kr++)Dt.set(wr[kr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,i,u,s){if(Qe.apply(this,arguments),Ve){if(!Ve)throw Error(l(198));var c=We;Ve=!1,We=null,He||(He=!0,Ke=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Sr(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Sr(a,i,s),o=u}}}if(He)throw e=Ke,He=!1,Ke=null,e}function _r(e,t){var n=na(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Or]||(e[Or]=!0,i.forEach((function(t){xr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;a|=2,o=r}var l=na(o),i=e+"__"+(t?"capture":"bubble");l.has(i)||(t&&(a|=4),Tr(o,e,a,t),l.add(i))}function Tr(e,t,n,r){var a=Dt.get(t);switch(void 0===a?2:a){case 0:a=Xt;break;case 1:a=qt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function jr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=Zr(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}!function(e,t,n){if(Ae)return e();Ae=!0;try{Le(e,t,n)}finally{Ae=!1,ze()}}((function(){var r=o,a=Ce(n),l=[];e:{var i=jt.get(e);if(void 0!==i){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case Ot:case Nt:case Pt:u=bn;break;case Tt:u=Tn;break;case"scroll":u=mn;break;case"wheel":u=jn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Nn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Fe(m,d))&&c.push(Dr(m,h,p))),f)break;m=m.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Zr(s)&&!s[qr])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Zr(s):null)&&(s!==(f=Xe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:ea(u),p=null==s?i:ea(s),(i=new c(h,m+"leave",u,n,a)).target=f,i.relatedTarget=p,h=null,Zr(a)===r&&((c=new c(d,m+"enter",s,n,a)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Rr(p))m++;for(p=0,h=d;h;h=Rr(h))p++;for(;0<m-p;)c=Rr(c),m--;for(;0<p-m;)d=Rr(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Rr(c),d=Rr(d)}c=null}else c=null;null!==u&&Lr(l,i,u,c,!1),null!==s&&null!==f&&Lr(l,f,s,c,!0)}if("select"===(u=(i=r?ea(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Xn;else if(Vn(i))if(qn)v=or;else{v=rr;var g=nr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=ar);switch(v&&(v=v(e,r))?Wn(l,v,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ae(i,"number",i.value)),g=r?ea(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(hr=g,vr=r,gr=null);break;case"focusout":gr=vr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":br(l,n,a)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(y=nn()):(en="value"in(Jt=a)?Jt.value:Jt.textContent,$n=!0)),0<(g=Mr(r,b)).length&&(b=new kn(b,e,null,n,a),l.push({event:b,listeners:g}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,An);case"textInput":return(e=t.data)===An&&zn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Mn&&Fn(e,t)?(e=nn(),tn=en=Jt=null,$n=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(a=new kn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=y)}Cr(l,t)}))}function Dr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Fe(e,n))&&r.unshift(Dr(e,o,a)),null!=(o=Fe(e,t))&&r.push(Dr(e,o,a))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=Fe(n,o))&&l.unshift(Dr(n,u,i)):a||null!=(u=Fe(n,o))&&l.push(Dr(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}function Ir(){}var Ar=null,zr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0,Yr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Yr,Xr="__reactProps$"+Yr,qr="__reactContainer$"+Yr,Gr="__reactEvents$"+Yr;function Zr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[qr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ta(e){return e[Xr]||null}function na(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var ra=[],aa=-1;function oa(e){return{current:e}}function la(e){0>aa||(e.current=ra[aa],ra[aa]=null,aa--)}function ia(e,t){aa++,ra[aa]=e.current,e.current=t}var ua={},sa=oa(ua),ca=oa(!1),fa=ua;function da(e,t){var n=e.type.contextTypes;if(!n)return ua;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function pa(e){return null!=e.childContextTypes}function ma(){la(ca),la(sa)}function ha(e,t,n){if(sa.current!==ua)throw Error(l(168));ia(sa,t),ia(ca,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(l(108,Y(t)||"Unknown",o));return a({},n,r)}function ga(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ua,fa=sa.current,ia(sa,e),ia(ca,ca.current),!0}function ya(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=va(e,t,fa),r.__reactInternalMemoizedMergedChildContext=e,la(ca),la(sa),ia(sa,e)):la(ca),ia(ca,n)}var ba=null,wa=null,ka=o.unstable_runWithPriority,Ea=o.unstable_scheduleCallback,xa=o.unstable_cancelCallback,Sa=o.unstable_shouldYield,Ca=o.unstable_requestPaint,_a=o.unstable_now,Oa=o.unstable_getCurrentPriorityLevel,Na=o.unstable_ImmediatePriority,Pa=o.unstable_UserBlockingPriority,Ta=o.unstable_NormalPriority,ja=o.unstable_LowPriority,Da=o.unstable_IdlePriority,Ma={},Ra=void 0!==Ca?Ca:function(){},La=null,Ia=null,Aa=!1,za=_a(),Fa=1e4>za?_a:function(){return _a()-za};function Ua(){switch(Oa()){case Na:return 99;case Pa:return 98;case Ta:return 97;case ja:return 96;case Da:return 95;default:throw Error(l(332))}}function $a(e){switch(e){case 99:return Na;case 98:return Pa;case 97:return Ta;case 96:return ja;case 95:return Da;default:throw Error(l(332))}}function Ba(e,t){return e=$a(e),ka(e,t)}function Va(e,t,n){return e=$a(e),Ea(e,t,n)}function Wa(){if(null!==Ia){var e=Ia;Ia=null,xa(e)}Ha()}function Ha(){if(!Aa&&null!==La){Aa=!0;var e=0;try{var t=La;Ba(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),La=null}catch(t){throw null!==La&&(La=La.slice(e+1)),Ea(Na,Wa),t}finally{Aa=!1}}}var Ka=k.ReactCurrentBatchConfig;function Ya(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qa=oa(null),Xa=null,qa=null,Ga=null;function Za(){Ga=qa=Xa=null}function Ja(e){var t=Qa.current;la(Qa),e.type._context._currentValue=t}function eo(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function to(e,t){Xa=e,Ga=qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ml=!0),e.firstContext=null)}function no(e,t){if(Ga!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ga=e,t=1073741823),t={context:e,observedBits:t,next:null},null===qa){if(null===Xa)throw Error(l(308));qa=t,Xa.dependencies={lanes:0,firstContext:t,responders:null}}else qa=qa.next=t;return e._currentValue}var ro=!1;function ao(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function lo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function io(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function uo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function so(e,t,n,r){var o=e.updateQueue;ro=!1;var l=o.firstBaseUpdate,i=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var s=u,c=s.next;s.next=null,null===i?l=c:i.next=c,i=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==i&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==l){for(d=o.baseState,i=0,f=c=s=null;;){u=l.lane;var p=l.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,u);break e}d=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,d,u):m))break e;d=a({},d,u);break e;case 2:ro=!0}}null!==l.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[l]:u.push(l))}else p={eventTime:p,lane:u,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,i|=u;if(null===(l=l.next)){if(null===(u=o.shared.pending))break;l=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(s=d),o.baseState=s,o.firstBaseUpdate=c,o.lastBaseUpdate=f,Li|=i,e.lanes=i,e.memoizedState=d}}function co(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var fo=(new r.Component).refs;function po(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mo={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=lu(),a=iu(e),o=lo(r,a);o.payload=t,null!=n&&(o.callback=n),io(e,o),uu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=lu(),a=iu(e),o=lo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),io(e,o),uu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=lu(),r=iu(e),a=lo(n,r);a.tag=2,null!=t&&(a.callback=t),io(e,a),uu(e,r,n)}};function ho(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function vo(e,t,n){var r=!1,a=ua,o=t.contextType;return"object"==typeof o&&null!==o?o=no(o):(a=pa(t)?fa:sa.current,o=(r=null!=(r=t.contextTypes))?da(e,a):ua),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mo.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=fo,ao(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=no(o):(o=pa(t)?fa:sa.current,a.context=da(e,o)),so(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(po(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&mo.enqueueReplaceState(a,a.state,null),so(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var bo=Array.isArray;function wo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===fo&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(l(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Eo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Uu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function i(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=wo(e,t,n),r.return=e,r):((r=$u(n.type,n.key,n.props,null,e.mode,r)).ref=wo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Bu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=$u(t.type,t.key,t.props,null,e.mode,n)).ref=wo(e,null,t),n.return=e,n;case x:return(t=Hu(t,e.mode,n)).return=e,t}if(bo(t)||B(t))return(t=Bu(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===a?n.type===S?f(e,t,n.props.children,r,a):s(e,t,n,r):null;case x:return n.key===a?c(e,t,n,r):null}if(bo(n)||B(n))return null!==a?null:f(e,t,n,r,null);ko(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,a,r.key):s(t,e,r,a);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(bo(r)||B(r))return f(t,e=e.get(n)||null,r,a,null);ko(t,r)}return null}function h(a,l,i,u){for(var s=null,c=null,f=l,h=l=0,v=null;null!==f&&h<i.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var g=p(a,f,i[h],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),l=o(g,l,h),null===c?s=g:c.sibling=g,c=g,f=v}if(h===i.length)return n(a,f),s;if(null===f){for(;h<i.length;h++)null!==(f=d(a,i[h],u))&&(l=o(f,l,h),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(a,f);h<i.length;h++)null!==(v=m(f,a,h,i[h],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),l=o(v,l,h),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),s}function v(a,i,u,s){var c=B(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,h=i,v=i=0,g=null,y=u.next();null!==h&&!y.done;v++,y=u.next()){h.index>v?(g=h,h=null):g=h.sibling;var b=p(a,h,y.value,s);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(a,h),i=o(b,i,v),null===f?c=b:f.sibling=b,f=b,h=g}if(y.done)return n(a,h),c;if(null===h){for(;!y.done;v++,y=u.next())null!==(y=d(a,y.value,s))&&(i=o(y,i,v),null===f?c=y:f.sibling=y,f=y);return c}for(h=r(a,h);!y.done;v++,y=u.next())null!==(y=m(h,a,v,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?v:y.key),i=o(y,i,v),null===f?c=y:f.sibling=y,f=y);return e&&h.forEach((function(e){return t(a,e)})),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===S&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case E:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(o.type===S){n(e,s.sibling),(r=a(s,o.props.children)).return=e,e=r;break e}break;default:if(s.elementType===o.type){n(e,s.sibling),(r=a(s,o.props)).ref=wo(e,s,o),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}o.type===S?((r=Bu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=$u(o.type,o.key,o.props,null,e.mode,u)).ref=wo(e,r,o),u.return=e,e=u)}return i(e);case x:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hu(o,e.mode,u)).return=e,e=r}return i(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Wu(o,e.mode,u)).return=e,e=r),i(e);if(bo(o))return h(e,r,o,u);if(B(o))return v(e,r,o,u);if(c&&ko(e,o),void 0===o&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(l(152,Y(e.type)||"Component"))}return n(e,r)}}var xo=Eo(!0),So=Eo(!1),Co={},_o=oa(Co),Oo=oa(Co),No=oa(Co);function Po(e){if(e===Co)throw Error(l(174));return e}function To(e,t){switch(ia(No,t),ia(Oo,e),ia(_o,Co),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}la(_o),ia(_o,t)}function jo(){la(_o),la(Oo),la(No)}function Do(e){Po(No.current);var t=Po(_o.current),n=pe(t,e.type);t!==n&&(ia(Oo,e),ia(_o,n))}function Mo(e){Oo.current===e&&(la(_o),la(Oo))}var Ro=oa(0);function Lo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Io=null,Ao=null,zo=!1;function Fo(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Uo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function $o(e){if(zo){var t=Ao;if(t){var n=t;if(!Uo(e,t)){if(!(t=Wr(n.nextSibling))||!Uo(e,t))return e.flags=-1025&e.flags|2,zo=!1,void(Io=e);Fo(Io,n)}Io=e,Ao=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,zo=!1,Io=e}}function Bo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Io=e}function Vo(e){if(e!==Io)return!1;if(!zo)return Bo(e),zo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=Ao;t;)Fo(e,t),t=Wr(t.nextSibling);if(Bo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ao=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ao=null}}else Ao=Io?Wr(e.stateNode.nextSibling):null;return!0}function Wo(){Ao=Io=null,zo=!1}var Ho=[];function Ko(){for(var e=0;e<Ho.length;e++)Ho[e]._workInProgressVersionPrimary=null;Ho.length=0}var Yo=k.ReactCurrentDispatcher,Qo=k.ReactCurrentBatchConfig,Xo=0,qo=null,Go=null,Zo=null,Jo=!1,el=!1;function tl(){throw Error(l(321))}function nl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function rl(e,t,n,r,a,o){if(Xo=o,qo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Yo.current=null===e||null===e.memoizedState?Pl:Tl,e=n(r,a),el){o=0;do{if(el=!1,!(25>o))throw Error(l(301));o+=1,Zo=Go=null,t.updateQueue=null,Yo.current=jl,e=n(r,a)}while(el)}if(Yo.current=Nl,t=null!==Go&&null!==Go.next,Xo=0,Zo=Go=qo=null,Jo=!1,t)throw Error(l(300));return e}function al(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zo?qo.memoizedState=Zo=e:Zo=Zo.next=e,Zo}function ol(){if(null===Go){var e=qo.alternate;e=null!==e?e.memoizedState:null}else e=Go.next;var t=null===Zo?qo.memoizedState:Zo.next;if(null!==t)Zo=t,Go=e;else{if(null===e)throw Error(l(310));e={memoizedState:(Go=e).memoizedState,baseState:Go.baseState,baseQueue:Go.baseQueue,queue:Go.queue,next:null},null===Zo?qo.memoizedState=Zo=e:Zo=Zo.next=e}return Zo}function ll(e,t){return"function"==typeof t?t(e):t}function il(e){var t=ol(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=Go,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=i=o=null,s=a;do{var c=s.lane;if((Xo&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(i=u=f,o=r):u=u.next=f,qo.lanes|=c,Li|=c}s=s.next}while(null!==s&&s!==a);null===u?o=r:u.next=i,lr(r,t.memoizedState)||(Ml=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ul(e){var t=ol(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);lr(o,t.memoizedState)||(Ml=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function sl(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Xo&e)===e)&&(t._workInProgressVersionPrimary=r,Ho.push(t))),e)return n(t._source);throw Ho.push(t),Error(l(350))}function cl(e,t,n,r){var a=Oi;if(null===a)throw Error(l(349));var o=t._getVersion,i=o(t._source),u=Yo.current,s=u.useState((function(){return sl(a,t,n)})),c=s[1],f=s[0];s=Zo;var d=e.memoizedState,p=d.refs,m=p.getSnapshot,h=d.source;d=d.subscribe;var v=qo;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!lr(i,e)){e=n(t._source),lr(f,e)||(c(e),e=iu(v),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,l=e;0<l;){var u=31-Vt(l),s=1<<u;r[u]|=e,l&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=iu(v);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),lr(m,n)&&lr(h,t)&&lr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ll,lastRenderedState:f}).dispatch=c=Ol.bind(null,qo,e),s.queue=e,s.baseQueue=null,f=sl(a,t,n),s.memoizedState=s.baseState=f),f}function fl(e,t,n){return cl(ol(),e,t,n)}function dl(e){var t=al();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ll,lastRenderedState:e}).dispatch=Ol.bind(null,qo,e),[t.memoizedState,e]}function pl(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=qo.updateQueue)?(t={lastEffect:null},qo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ml(e){return e={current:e},al().memoizedState=e}function hl(){return ol().memoizedState}function vl(e,t,n,r){var a=al();qo.flags|=e,a.memoizedState=pl(1|t,n,void 0,void 0===r?null:r)}function gl(e,t,n,r){var a=ol();r=void 0===r?null:r;var o=void 0;if(null!==Go){var l=Go.memoizedState;if(o=l.destroy,null!==r&&nl(r,l.deps))return void pl(t,n,o,r)}qo.flags|=e,a.memoizedState=pl(1|t,n,o,r)}function yl(e,t){return vl(516,4,e,t)}function bl(e,t){return gl(516,4,e,t)}function wl(e,t){return gl(4,2,e,t)}function kl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function El(e,t,n){return n=null!=n?n.concat([e]):null,gl(4,2,kl.bind(null,t,e),n)}function xl(){}function Sl(e,t){var n=ol();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&nl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Cl(e,t){var n=ol();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&nl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _l(e,t){var n=Ua();Ba(98>n?98:n,(function(){e(!0)})),Ba(97<n?97:n,(function(){var n=Qo.transition;Qo.transition=1;try{e(!1),t()}finally{Qo.transition=n}}))}function Ol(e,t,n){var r=lu(),a=iu(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},l=t.pending;if(null===l?o.next=o:(o.next=l.next,l.next=o),t.pending=o,l=e.alternate,e===qo||null!==l&&l===qo)el=Jo=!0;else{if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,u=l(i,n);if(o.eagerReducer=l,o.eagerState=u,lr(u,i))return}catch(e){}uu(e,a,r)}}var Nl={readContext:no,useCallback:tl,useContext:tl,useEffect:tl,useImperativeHandle:tl,useLayoutEffect:tl,useMemo:tl,useReducer:tl,useRef:tl,useState:tl,useDebugValue:tl,useDeferredValue:tl,useTransition:tl,useMutableSource:tl,useOpaqueIdentifier:tl,unstable_isNewReconciler:!1},Pl={readContext:no,useCallback:function(e,t){return al().memoizedState=[e,void 0===t?null:t],e},useContext:no,useEffect:yl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vl(4,2,kl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vl(4,2,e,t)},useMemo:function(e,t){var n=al();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=al();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ol.bind(null,qo,e),[r.memoizedState,e]},useRef:ml,useState:dl,useDebugValue:xl,useDeferredValue:function(e){var t=dl(e),n=t[0],r=t[1];return yl((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=dl(!1),t=e[0];return ml(e=_l.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=al();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},cl(r,e,t,n)},useOpaqueIdentifier:function(){if(zo){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(l(355))})),n=dl(t)[1];return 0==(2&qo.mode)&&(qo.flags|=516,pl(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return dl(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},Tl={readContext:no,useCallback:Sl,useContext:no,useEffect:bl,useImperativeHandle:El,useLayoutEffect:wl,useMemo:Cl,useReducer:il,useRef:hl,useState:function(){return il(ll)},useDebugValue:xl,useDeferredValue:function(e){var t=il(ll),n=t[0],r=t[1];return bl((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=il(ll)[0];return[hl().current,e]},useMutableSource:fl,useOpaqueIdentifier:function(){return il(ll)[0]},unstable_isNewReconciler:!1},jl={readContext:no,useCallback:Sl,useContext:no,useEffect:bl,useImperativeHandle:El,useLayoutEffect:wl,useMemo:Cl,useReducer:ul,useRef:hl,useState:function(){return ul(ll)},useDebugValue:xl,useDeferredValue:function(e){var t=ul(ll),n=t[0],r=t[1];return bl((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=ul(ll)[0];return[hl().current,e]},useMutableSource:fl,useOpaqueIdentifier:function(){return ul(ll)[0]},unstable_isNewReconciler:!1},Dl=k.ReactCurrentOwner,Ml=!1;function Rl(e,t,n,r){t.child=null===e?So(t,null,n,r):xo(t,e.child,n,r)}function Ll(e,t,n,r,a){n=n.render;var o=t.ref;return to(t,a),r=rl(e,t,n,r,o,a),null===e||Ml?(t.flags|=1,Rl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Jl(e,t,a))}function Il(e,t,n,r,a,o){if(null===e){var l=n.type;return"function"!=typeof l||Fu(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$u(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Al(e,t,l,r,a,o))}return l=e.child,0==(a&o)&&(a=l.memoizedProps,(n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)?Jl(e,t,o):(t.flags|=1,(e=Uu(l,r)).ref=t.ref,e.return=t,t.child=e)}function Al(e,t,n,r,a,o){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Ml=!1,0==(o&a))return t.lanes=e.lanes,Jl(e,t,o);0!=(16384&e.flags)&&(Ml=!0)}return Ul(e,t,n,r,o)}function zl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(0,e),null;t.memoizedState={baseLanes:0},vu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,vu(0,r);return Rl(e,t,a,n),t.child}function Fl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ul(e,t,n,r,a){var o=pa(n)?fa:sa.current;return o=da(t,o),to(t,a),n=rl(e,t,n,r,o,a),null===e||Ml?(t.flags|=1,Rl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Jl(e,t,a))}function $l(e,t,n,r,a){if(pa(n)){var o=!0;ga(t)}else o=!1;if(to(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vo(t,n,r),yo(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?no(s):da(t,s=pa(n)?fa:sa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&go(t,l,r,s),ro=!1;var d=t.memoizedState;l.state=d,so(t,r,l,a),u=t.memoizedState,i!==r||d!==u||ca.current||ro?("function"==typeof c&&(po(t,n,c,r),u=t.memoizedState),(i=ro||ho(t,n,i,r,d,u,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4)):("function"==typeof l.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4),r=!1)}else{l=t.stateNode,oo(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:Ya(t.type,i),l.props=s,f=t.pendingProps,d=l.context,u="object"==typeof(u=n.contextType)&&null!==u?no(u):da(t,u=pa(n)?fa:sa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&go(t,l,r,u),ro=!1,d=t.memoizedState,l.state=d,so(t,r,l,a);var m=t.memoizedState;i!==f||d!==m||ca.current||ro?("function"==typeof p&&(po(t,n,p,r),m=t.memoizedState),(s=ro||ho(t,n,s,r,d,m,u))?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,m,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),l.props=r,l.state=m,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Bl(e,t,n,r,o,a)}function Bl(e,t,n,r,a,o){Fl(e,t);var l=0!=(64&t.flags);if(!r&&!l)return a&&ya(t,n,!1),Jl(e,t,o);r=t.stateNode,Dl.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,i,o)):Rl(e,t,i,o),t.memoizedState=r.state,a&&ya(t,n,!0),t.child}function Vl(e){var t=e.stateNode;t.pendingContext?ha(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ha(0,t.context,!1),To(e,t.containerInfo)}var Wl,Hl,Kl,Yl={dehydrated:null,retryLane:0};function Ql(e,t,n){var r,a=t.pendingProps,o=Ro.current,l=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(l=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ia(Ro,1&o),null===e?(void 0!==a.fallback&&$o(t),e=a.children,o=a.fallback,l?(e=Xl(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yl,e):"number"==typeof a.unstable_expectedLoadTime?(e=Xl(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yl,t.lanes=33554432,e):((n=Vu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,l?(a=function(e,t,n,r,a){var o=t.mode,l=e.child;e=l.sibling;var i={mode:"hidden",children:n};return 0==(2&o)&&t.child!==l?((n=t.child).childLanes=0,n.pendingProps=i,null!==(l=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=l,l.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Uu(l,i),null!==e?r=Uu(e,r):(r=Bu(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},l.childLanes=e.childLanes&~n,t.memoizedState=Yl,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Uu(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Xl(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Vu(t,a,0,null),n=Bu(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function ql(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),eo(e.return,t)}function Gl(e,t,n,r,a,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a,l.lastEffect=o)}function Zl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Rl(e,t,r.children,n),0!=(2&(r=Ro.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ql(e,n);else if(19===e.tag)ql(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ia(Ro,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Lo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Gl(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Lo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Gl(t,!0,n,null,o,t.lastEffect);break;case"together":Gl(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Jl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Li|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Uu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Uu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ei(e,t){if(!zo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ti(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ma(),null;case 3:return jo(),la(ca),la(sa),Ko(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Mo(t);var o=Po(No.current);if(n=t.type,null!==e&&null!=t.stateNode)Hl(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(l(166));return null}if(e=Po(_o.current),Vo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[Qr]=t,r[Xr]=i,n){case"dialog":_r("cancel",r),_r("close",r);break;case"iframe":case"object":case"embed":_r("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)_r(Er[e],r);break;case"source":_r("error",r);break;case"img":case"image":case"link":_r("error",r),_r("load",r);break;case"details":_r("toggle",r);break;case"input":ee(r,i),_r("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},_r("invalid",r);break;case"textarea":ue(r,i),_r("invalid",r)}for(var s in xe(n,i),e=null,i)i.hasOwnProperty(s)&&(o=i[s],"children"===s?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(s)&&null!=o&&"onScroll"===s&&_r("scroll",r));switch(n){case"input":q(r),re(r,i,!0);break;case"textarea":q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Xr]=r,Wl(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":_r("cancel",e),_r("close",e),o=r;break;case"iframe":case"object":case"embed":_r("load",e),o=r;break;case"video":case"audio":for(o=0;o<Er.length;o++)_r(Er[o],e);o=r;break;case"source":_r("error",e),o=r;break;case"img":case"image":case"link":_r("error",e),_r("load",e),o=r;break;case"details":_r("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),_r("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),_r("invalid",e);break;case"textarea":ue(e,r),o=ie(e,r),_r("invalid",e);break;default:o=r}xe(n,o);var c=o;for(i in c)if(c.hasOwnProperty(i)){var f=c[i];"style"===i?ke(e,f):"dangerouslySetInnerHTML"===i?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===i?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(u.hasOwnProperty(i)?null!=f&&"onScroll"===i&&_r("scroll",e):null!=f&&w(e,i,f,s))}switch(n){case"input":q(e),re(e,r,!1);break;case"textarea":q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?le(e,!!r.multiple,i,!1):null!=r.defaultValue&&le(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Ir)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Kl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));n=Po(No.current),Po(_o.current),Vo(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return la(Ro),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ro.current)?0===Di&&(Di=3):(0!==Di&&3!==Di||(Di=4),null===Oi||0==(134217727&Li)&&0==(134217727&Ii)||du(Oi,Pi))),(r||n)&&(t.flags|=4),null);case 4:return jo(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return Ja(t),null;case 17:return pa(t.type)&&ma(),null;case 19:if(la(Ro),null===(r=t.memoizedState))return null;if(i=0!=(64&t.flags),null===(s=r.rendering))if(i)ei(r,!1);else{if(0!==Di||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Lo(e))){for(t.flags|=64,ei(r,!1),null!==(i=s.updateQueue)&&(t.updateQueue=i,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ia(Ro,1&Ro.current|2),t.child}e=e.sibling}null!==r.tail&&Fa()>Ui&&(t.flags|=64,i=!0,ei(r,!1),t.lanes=33554432)}else{if(!i)if(null!==(e=Lo(s))){if(t.flags|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ei(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!zo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fa()-r.renderingStartTime>Ui&&1073741824!==n&&(t.flags|=64,i=!0,ei(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fa(),n.sibling=null,t=Ro.current,ia(Ro,i?1&t|2:1&t),n):null;case 23:case 24:return gu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(l(156,t.tag))}function ni(e){switch(e.tag){case 1:pa(e.type)&&ma();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(jo(),la(ca),la(sa),Ko(),0!=(64&(t=e.flags)))throw Error(l(285));return e.flags=-4097&t|64,e;case 5:return Mo(e),null;case 13:return la(Ro),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return la(Ro),null;case 4:return jo(),null;case 10:return Ja(e),null;case 23:case 24:return gu(),null;default:return null}}function ri(e,t){try{var n="",r=t;do{n+=K(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ai(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Po(_o.current);var l,i=null;switch(n){case"input":o=J(e,o),r=J(e,r),i=[];break;case"option":o=oe(e,o),r=oe(e,r),i=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":o=ie(e,o),r=ie(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(f in xe(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var s=o[f];for(l in s)s.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?i||(i=[]):(i=i||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&_r("scroll",e),i||s===c||(i=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(i=i||[]).push(f,c))}n&&(i=i||[]).push("style",n);var f=i;(t.updateQueue=f)&&(t.flags|=4)}},Kl=function(e,t,n,r){n!==r&&(t.flags|=4)};var oi="function"==typeof WeakMap?WeakMap:Map;function li(e,t,n){(n=lo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wi||(Wi=!0,Hi=r),ai(0,t)},n}function ii(e,t,n){(n=lo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ai(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ki?Ki=new Set([this]):Ki.add(this),ai(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ui="function"==typeof WeakSet?WeakSet:Set;function si(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ru(e,t)}else t.current=null}function ci(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ya(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(l(163))}function fi(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(ju(n,e),Tu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ya(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&co(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}co(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(l(163))}function di(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=we("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pi(e,t){if(wa&&"function"==typeof wa.onCommitFiberUnmount)try{wa.onCommitFiberUnmount(ba,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))ju(t,n);else{r=t;try{a()}catch(e){Ru(r,e)}}n=n.next}while(n!==e)}break;case 1:if(si(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ru(t,e)}break;case 5:si(t);break;case 4:bi(e,t)}}function mi(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function hi(e){return 5===e.tag||3===e.tag||4===e.tag}function vi(e){e:{for(var t=e.return;null!==t;){if(hi(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(l(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||hi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gi(e,n,t):yi(e,n,t)}function gi(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(gi(e,t,n),e=e.sibling;null!==e;)gi(e,t,n),e=e.sibling}function yi(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yi(e,t,n),e=e.sibling;null!==e;)yi(e,t,n),e=e.sibling}function bi(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(l(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var i=e,u=a,s=u;;)if(pi(i,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(i=n,u=a.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(pi(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function wi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,a),t=Se(e,r),a=0;a<o.length;a+=2){var i=o[a],u=o[a+1];"style"===i?ke(n,u):"dangerouslySetInnerHTML"===i?ve(n,u):"children"===i?ge(n,u):w(n,i,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?le(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?le(n,!!r.multiple,r.defaultValue,!0):le(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fi=Fa(),di(t.child,!0)),void ki(t);case 19:return void ki(t);case 17:return;case 23:case 24:return void di(t,null!==t.memoizedState)}throw Error(l(163))}function ki(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ui),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Ei(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xi=Math.ceil,Si=k.ReactCurrentDispatcher,Ci=k.ReactCurrentOwner,_i=0,Oi=null,Ni=null,Pi=0,Ti=0,ji=oa(0),Di=0,Mi=null,Ri=0,Li=0,Ii=0,Ai=0,zi=null,Fi=0,Ui=1/0;function $i(){Ui=Fa()+500}var Bi,Vi=null,Wi=!1,Hi=null,Ki=null,Yi=!1,Qi=null,Xi=90,qi=[],Gi=[],Zi=null,Ji=0,eu=null,tu=-1,nu=0,ru=0,au=null,ou=!1;function lu(){return 0!=(48&_i)?Fa():-1!==tu?tu:tu=Fa()}function iu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ua()?1:2;if(0===nu&&(nu=Ri),0!==Ka.transition){0!==ru&&(ru=null!==zi?zi.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ua(),e=Ft(0!=(4&_i)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Ji)throw Ji=0,eu=null,Error(l(185));if(null===(e=su(e,t)))return null;Bt(e,t,n),e===Oi&&(Ii|=t,4===Di&&du(e,Pi));var r=Ua();1===t?0!=(8&_i)&&0==(48&_i)?pu(e):(cu(e,n),0===_i&&($i(),Wa())):(0==(4&_i)||98!==r&&99!==r||(null===Zi?Zi=new Set([e]):Zi.add(e)),cu(e,n)),zi=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var u=31-Vt(i),s=1<<u,c=o[u];if(-1===c){if(0==(s&r)||0!=(s&a)){c=t,It(s);var f=Lt;o[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);i&=~s}if(r=At(e,e===Oi?Pi:0),t=Lt,0===r)null!==n&&(n!==Ma&&xa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ma&&xa(n)}15===t?(n=pu.bind(null,e),null===La?(La=[n],Ia=Ea(Na,Ha)):La.push(n),n=Ma):n=14===t?Va(99,pu.bind(null,e)):Va(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(l(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&_i))throw Error(l(327));var t=e.callbackNode;if(Pu()&&e.callbackNode!==t)return null;var n=At(e,e===Oi?Pi:0);if(0===n)return null;var r=n,a=_i;_i|=16;var o=wu();for(Oi===e&&Pi===r||($i(),yu(e,r));;)try{xu();break}catch(t){bu(e,t)}if(Za(),Si.current=o,_i=a,null!==Ni?r=0:(Oi=null,Pi=0,r=Di),0!=(Ri&Ii))yu(e,0);else if(0!==r){if(2===r&&(_i|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=zt(e))&&(r=ku(e,n))),1===r)throw t=Mi,yu(e,0),du(e,n),cu(e,Fa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(l(345));case 2:_u(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Fi+500-Fa())){if(0!==At(e,0))break;if(((a=e.suspendedLanes)&n)!==n){lu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=$r(_u.bind(null,e),r);break}_u(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var i=31-Vt(n);o=1<<i,(i=r[i])>a&&(a=i),n&=~o}if(n=a,10<(n=(120>(n=Fa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xi(n/1960))-n)){e.timeoutHandle=$r(_u.bind(null,e),n);break}_u(e);break;case 5:_u(e);break;default:throw Error(l(329))}}return cu(e,Fa()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~Ai,t&=~Ii,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&_i))throw Error(l(327));if(Pu(),e===Oi&&0!=(e.expiredLanes&Pi)){var t=Pi,n=ku(e,t);0!=(Ri&Ii)&&(n=ku(e,t=At(e,t)))}else n=ku(e,t=At(e,0));if(0!==e.tag&&2===n&&(_i|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=zt(e))&&(n=ku(e,t))),1===n)throw n=Mi,yu(e,0),du(e,t),cu(e,Fa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,_u(e),cu(e,Fa()),null}function mu(e,t){var n=_i;_i|=1;try{return e(t)}finally{0===(_i=n)&&($i(),Wa())}}function hu(e,t){var n=_i;_i&=-2,_i|=8;try{return e(t)}finally{0===(_i=n)&&($i(),Wa())}}function vu(e,t){ia(ji,Ti),Ti|=t,Ri|=t}function gu(){Ti=ji.current,la(ji)}function yu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Ni)for(n=Ni.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ma();break;case 3:jo(),la(ca),la(sa),Ko();break;case 5:Mo(r);break;case 4:jo();break;case 13:case 19:la(Ro);break;case 10:Ja(r);break;case 23:case 24:gu()}n=n.return}Oi=e,Ni=Uu(e.current,null),Pi=Ti=Ri=t,Di=0,Mi=null,Ai=Ii=Li=0}function bu(e,t){for(;;){var n=Ni;try{if(Za(),Yo.current=Nl,Jo){for(var r=qo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Jo=!1}if(Xo=0,Zo=Go=qo=null,el=!1,Ci.current=null,null===n||null===n.return){Di=1,Mi=t,Ni=null;break}e:{var o=e,l=n.return,i=n,u=t;if(t=Pi,i.flags|=2048,i.firstEffect=i.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.lanes=c.lanes):(i.updateQueue=null,i.memoizedState=null)}var f=0!=(1&Ro.current),d=l;do{var p;if(p=13===d.tag){var m=d.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,i.flags|=16384,i.flags&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=lo(-1,1);y.tag=2,io(i,y)}i.lanes|=1;break e}u=void 0,i=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new oi,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(i)){u.add(i);var w=Lu.bind(null,o,s,i);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Y(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Di&&(Di=2),u=ri(u,i),d=l;do{switch(d.tag){case 3:o=u,d.flags|=4096,t&=-t,d.lanes|=t,uo(d,li(0,o,t));break e;case 1:o=u;var k=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Ki||!Ki.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,uo(d,ii(d,o,t));break e}}d=d.return}while(null!==d)}Cu(n)}catch(e){t=e,Ni===n&&null!==n&&(Ni=n=n.return);continue}break}}function wu(){var e=Si.current;return Si.current=Nl,null===e?Nl:e}function ku(e,t){var n=_i;_i|=16;var r=wu();for(Oi===e&&Pi===t||yu(e,t);;)try{Eu();break}catch(t){bu(e,t)}if(Za(),_i=n,Si.current=r,null!==Ni)throw Error(l(261));return Oi=null,Pi=0,Di}function Eu(){for(;null!==Ni;)Su(Ni)}function xu(){for(;null!==Ni&&!Sa();)Su(Ni)}function Su(e){var t=Bi(e.alternate,e,Ti);e.memoizedProps=e.pendingProps,null===t?Cu(e):Ni=t,Ci.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ti(n,t,Ti)))return void(Ni=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ti)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ni(t)))return n.flags&=2047,void(Ni=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ni=t);Ni=t=e}while(null!==t);0===Di&&(Di=5)}function _u(e){var t=Ua();return Ba(99,Ou.bind(null,e,t)),null}function Ou(e,t){do{Pu()}while(null!==Qi);if(0!=(48&_i))throw Error(l(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var i=e.eventTimes,u=e.expirationTimes;0<o;){var s=31-Vt(o),c=1<<s;a[s]=0,i[s]=-1,u[s]=-1,o&=~c}if(null!==Zi&&0==(24&r)&&Zi.has(e)&&Zi.delete(e),e===Oi&&(Ni=Oi=null,Pi=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=_i,_i|=32,Ci.current=null,Ar=Qt,pr(i=dr())){if("selectionStart"in i)u={start:i.selectionStart,end:i.selectionEnd};else e:if(u=(u=i.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,o=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,m=0,h=0,v=i,g=null;t:for(;;){for(var y;v!==u||0!==o&&3!==v.nodeType||(d=f+o),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===i)break t;if(g===u&&++m===o&&(d=f),g===s&&++h===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:i,selectionRange:u},Qt=!1,au=null,ou=!1,Vi=r;do{try{Nu()}catch(e){if(null===Vi)throw Error(l(330));Ru(Vi,e),Vi=Vi.nextEffect}}while(null!==Vi);au=null,Vi=r;do{try{for(i=e;null!==Vi;){var b=Vi.flags;if(16&b&&ge(Vi.stateNode,""),128&b){var w=Vi.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:vi(Vi),Vi.flags&=-3;break;case 6:vi(Vi),Vi.flags&=-3,wi(Vi.alternate,Vi);break;case 1024:Vi.flags&=-1025;break;case 1028:Vi.flags&=-1025,wi(Vi.alternate,Vi);break;case 4:wi(Vi.alternate,Vi);break;case 8:bi(i,u=Vi);var E=u.alternate;mi(u),null!==E&&mi(E)}Vi=Vi.nextEffect}}catch(e){if(null===Vi)throw Error(l(330));Ru(Vi,e),Vi=Vi.nextEffect}}while(null!==Vi);if(k=zr,w=dr(),b=k.focusedElem,i=k.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==i&&pr(b)&&(w=i.start,void 0===(k=i.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(i.start,u),i=void 0===i.end?E:Math.min(i.end,u),!k.extend&&E>i&&(u=i,i=E,E=u),u=cr(b,E),o=cr(b,i),u&&o&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==o.node||k.focusOffset!==o.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>i?(k.addRange(w),k.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Qt=!!Ar,zr=Ar=null,e.current=n,Vi=r;do{try{for(b=e;null!==Vi;){var x=Vi.flags;if(36&x&&fi(b,Vi.alternate,Vi),128&x){w=void 0;var S=Vi.ref;if(null!==S){var C=Vi.stateNode;switch(Vi.tag){case 5:w=C;break;default:w=C}"function"==typeof S?S(w):S.current=w}}Vi=Vi.nextEffect}}catch(e){if(null===Vi)throw Error(l(330));Ru(Vi,e),Vi=Vi.nextEffect}}while(null!==Vi);Vi=null,Ra(),_i=a}else e.current=n;if(Yi)Yi=!1,Qi=e,Xi=t;else for(Vi=r;null!==Vi;)t=Vi.nextEffect,Vi.nextEffect=null,8&Vi.flags&&((x=Vi).sibling=null,x.stateNode=null),Vi=t;if(0===(r=e.pendingLanes)&&(Ki=null),1===r?e===eu?Ji++:(Ji=0,eu=e):Ji=0,n=n.stateNode,wa&&"function"==typeof wa.onCommitFiberRoot)try{wa.onCommitFiberRoot(ba,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Fa()),Wi)throw Wi=!1,e=Hi,Hi=null,e;return 0!=(8&_i)||Wa(),null}function Nu(){for(;null!==Vi;){var e=Vi.alternate;ou||null===au||(0!=(8&Vi.flags)?Je(Vi,au)&&(ou=!0):13===Vi.tag&&Ei(e,Vi)&&Je(Vi,au)&&(ou=!0));var t=Vi.flags;0!=(256&t)&&ci(e,Vi),0==(512&t)||Yi||(Yi=!0,Va(97,(function(){return Pu(),null}))),Vi=Vi.nextEffect}}function Pu(){if(90!==Xi){var e=97<Xi?97:Xi;return Xi=90,Ba(e,Du)}return!1}function Tu(e,t){qi.push(t,e),Yi||(Yi=!0,Va(97,(function(){return Pu(),null})))}function ju(e,t){Gi.push(t,e),Yi||(Yi=!0,Va(97,(function(){return Pu(),null})))}function Du(){if(null===Qi)return!1;var e=Qi;if(Qi=null,0!=(48&_i))throw Error(l(331));var t=_i;_i|=32;var n=Gi;Gi=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],i=a.destroy;if(a.destroy=void 0,"function"==typeof i)try{i()}catch(e){if(null===o)throw Error(l(330));Ru(o,e)}}for(n=qi,qi=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===o)throw Error(l(330));Ru(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return _i=t,Wa(),!0}function Mu(e,t,n){io(e,t=li(0,t=ri(n,t),1)),t=lu(),null!==(e=su(e,1))&&(Bt(e,1,t),cu(e,t))}function Ru(e,t){if(3===e.tag)Mu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Mu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ki||!Ki.has(r))){var a=ii(n,e=ri(t,e),1);if(io(n,a),a=lu(),null!==(n=su(n,1)))Bt(n,1,a),cu(n,a);else if("function"==typeof r.componentDidCatch&&(null===Ki||!Ki.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Lu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=lu(),e.pingedLanes|=e.suspendedLanes&n,Oi===e&&(Pi&n)===n&&(4===Di||3===Di&&(62914560&Pi)===Pi&&500>Fa()-Fi?yu(e,0):Ai|=n),cu(e,t)}function Iu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ua()?1:2:(0===nu&&(nu=Ri),0===(t=Ut(62914560&~nu))&&(t=4194304))),n=lu(),null!==(e=su(e,t))&&(Bt(e,t,n),cu(e,n))}function Au(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new Au(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $u(e,t,n,r,a,o){var i=2;if(r=e,"function"==typeof e)Fu(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case S:return Bu(n.children,a,o,t);case I:i=8,a|=16;break;case C:i=8,a|=1;break;case _:return(e=zu(12,n,t,8|a)).elementType=_,e.type=_,e.lanes=o,e;case T:return(e=zu(13,n,t,a)).type=T,e.elementType=T,e.lanes=o,e;case j:return(e=zu(19,n,t,a)).elementType=j,e.lanes=o,e;case A:return Vu(n,a,o,t);case z:return(e=zu(24,n,t,a)).elementType=z,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:i=10;break e;case N:i=9;break e;case P:i=11;break e;case D:i=14;break e;case M:i=16,r=null;break e;case R:i=22;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=zu(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Bu(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function Vu(e,t,n,r){return(e=zu(23,e,r,t)).elementType=A,e.lanes=n,e}function Wu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ku(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=$t(0),this.expirationTimes=$t(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=$t(0),this.mutableSourceEagerHydrationData=null}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qu(e,t,n,r){var a=t.current,o=lu(),i=iu(a);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(l(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(pa(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(l(171))}if(1===n.tag){var s=n.type;if(pa(s)){n=va(n,s,u);break e}}n=u}else n=ua;return null===t.context?t.context=n:t.pendingContext=n,(t=lo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),io(a,t),uu(a,i,o),i}function Xu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gu(e,t){qu(e,t),(e=e.alternate)&&qu(e,t)}function Zu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ku(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ao(t),e[qr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o._internalRoot;if("function"==typeof a){var i=a;a=function(){var e=Xu(l);i.call(e)}}Qu(t,l,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zu(e,0,t?{hydrate:!0}:void 0)}(n,r),l=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Xu(l);u.call(e)}}hu((function(){Qu(t,l,e,a)}))}return Xu(l)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(l(200));return Yu(e,t,null,n)}Bi=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ca.current)Ml=!0;else{if(0==(n&r)){switch(Ml=!1,t.tag){case 3:Vl(t),Wo();break;case 5:Do(t);break;case 1:pa(t.type)&&ga(t);break;case 4:To(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ia(Qa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ql(e,t,n):(ia(Ro,1&Ro.current),null!==(t=Jl(e,t,n))?t.sibling:null);ia(Ro,1&Ro.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Zl(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ia(Ro,Ro.current),r)break;return null;case 23:case 24:return t.lanes=0,zl(e,t,n)}return Jl(e,t,n)}Ml=0!=(16384&e.flags)}else Ml=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=da(t,sa.current),to(t,n),a=rl(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var o=!0;ga(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ao(t);var i=r.getDerivedStateFromProps;"function"==typeof i&&po(t,r,i,e),a.updater=mo,t.stateNode=a,a._reactInternals=t,yo(t,r,e,n),t=Bl(null,t,r,!0,o,n)}else t.tag=0,Rl(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Fu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===D)return 14}return 2}(a),e=Ya(a,e),o){case 0:t=Ul(null,t,a,e,n);break e;case 1:t=$l(null,t,a,e,n);break e;case 11:t=Ll(null,t,a,e,n);break e;case 14:t=Il(null,t,a,Ya(a.type,e),r,n);break e}throw Error(l(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ul(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 1:return r=t.type,a=t.pendingProps,$l(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 3:if(Vl(t),r=t.updateQueue,null===e||null===r)throw Error(l(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oo(e,t),so(t,r,null,n),(r=t.memoizedState.element)===a)Wo(),t=Jl(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(Ao=Wr(t.stateNode.containerInfo.firstChild),Io=t,o=zo=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],Ho.push(o);for(n=So(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Rl(e,t,r,n),Wo();t=t.child}return t;case 5:return Do(t),null===e&&$o(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children,Ur(r,a)?i=null:null!==o&&Ur(r,o)&&(t.flags|=16),Fl(e,t),Rl(e,t,i,n),t.child;case 6:return null===e&&$o(t),null;case 13:return Ql(e,t,n);case 4:return To(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):Rl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ll(e,t,r,a=t.elementType===r?a:Ya(r,a),n);case 7:return Rl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Rl(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value;var u=t.type._context;if(ia(Qa,u._currentValue),u._currentValue=o,null!==i)if(u=i.value,0==(o=lr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(i.children===a.children&&!ca.current){t=Jl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){i=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=lo(-1,n&-n)).tag=2,io(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),eo(u.return,n),s.lanes|=n;break}c=c.next}}else i=10===u.tag&&u.type===t.type?null:u.child;if(null!==i)i.return=u;else for(i=u;null!==i;){if(i===t){i=null;break}if(null!==(u=i.sibling)){u.return=i.return,i=u;break}i=i.return}u=i}Rl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,to(t,n),r=r(a=no(a,o.unstable_observedBits)),t.flags|=1,Rl(e,t,r,n),t.child;case 14:return o=Ya(a=t.type,t.pendingProps),Il(e,t,a,o=Ya(a.type,o),r,n);case 15:return Al(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ya(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,pa(r)?(e=!0,ga(t)):e=!1,to(t,n),vo(t,r,a),yo(t,r,a,n),Bl(null,t,r,!0,e,n);case 19:return Zl(e,t,n);case 23:case 24:return zl(e,t,n)}throw Error(l(156,t.tag))},Zu.prototype.render=function(e){Qu(e,this._internalRoot,null,null)},Zu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qu(null,e,null,(function(){t[qr]=null}))},et=function(e){13===e.tag&&(uu(e,4,lu()),Gu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,lu()),Gu(e,67108864))},nt=function(e){if(13===e.tag){var t=lu(),n=iu(e);uu(e,n,t),Gu(e,n)}},rt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ta(r);if(!a)throw Error(l(90));G(r),ne(r,a)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&le(e,!!n.multiple,t,!1)}},De=mu,Me=function(e,t,n,r,a){var o=_i;_i|=4;try{return Ba(98,e.bind(null,t,n,r,a))}finally{0===(_i=o)&&($i(),Wa())}},Re=function(){0==(49&_i)&&(function(){if(null!==Zi){var e=Zi;Zi=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Fa())}))}Wa()}(),Pu())},Le=function(e,t){var n=_i;_i|=2;try{return e(t)}finally{0===(_i=n)&&($i(),Wa())}};var ns={Events:[Jr,ea,ta,Te,je,Pu,{current:!1}]},rs={findFiberByHostInstance:Zr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},as={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ba=os.inject(as),wa=os}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw Error(l(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=_i;if(0!=(48&n))return e(t);_i|=1;try{if(e)return Ba(99,e.bind(null,t))}finally{_i=n,Wa()}},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(l(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ju(t))throw Error(l(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(l(40));return!!e._reactRootContainer&&(hu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[qr]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return es(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},668:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DraggableCore",{enumerable:!0,get:function(){return f.default}}),t.default=void 0;var a=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=h(t);if(n&&n.has(e))return n.get(e);var a={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var i=o?Object.getOwnPropertyDescriptor(e,l):null;i&&(i.get||i.set)?Object.defineProperty(a,l,i):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a}(n(294)),o=m(n(697)),l=m(n(935)),i=m(n(10)),u=n(825),s=n(849),c=n(280),f=m(n(783)),d=m(n(904)),p=["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"];function m(e){return e&&e.__esModule?e:{default:e}}function h(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(h=function(e){return e?n:t})(e)}function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return x(e)}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(h,e);var t,n,r,o,c,m=(o=h,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(o);if(c){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function h(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),C(x(t=m.call(this,e)),"onDragStart",(function(e,n){if((0,d.default)("Draggable: onDragStart: %j",n),!1===t.props.onStart(e,(0,s.createDraggableData)(x(t),n)))return!1;t.setState({dragging:!0,dragged:!0})})),C(x(t),"onDrag",(function(e,n){if(!t.state.dragging)return!1;(0,d.default)("Draggable: onDrag: %j",n);var r,a,o=(0,s.createDraggableData)(x(t),n),l={x:o.x,y:o.y};if(t.props.bounds){var i=l.x,u=l.y;l.x+=t.state.slackX,l.y+=t.state.slackY;var c=(r=(0,s.getBoundPosition)(x(t),l.x,l.y),a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);l=!0);}catch(e){i=!0,a=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw a}}return o}}(r,a)||function(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=c[0],p=c[1];l.x=f,l.y=p,l.slackX=t.state.slackX+(i-l.x),l.slackY=t.state.slackY+(u-l.y),o.x=l.x,o.y=l.y,o.deltaX=l.x-t.state.x,o.deltaY=l.y-t.state.y}if(!1===t.props.onDrag(e,o))return!1;t.setState(l)})),C(x(t),"onDragStop",(function(e,n){if(!t.state.dragging)return!1;if(!1===t.props.onStop(e,(0,s.createDraggableData)(x(t),n)))return!1;(0,d.default)("Draggable: onDragStop: %j",n);var r={dragging:!1,slackX:0,slackY:0};if(Boolean(t.props.position)){var a=t.props.position,o=a.x,l=a.y;r.x=o,r.y=l}t.setState(r)})),t.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:y({},e.position),slackX:0,slackY:0,isElementSVG:!1},!e.position||e.onDrag||e.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),t}return t=h,r=[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,d.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:y({},n)})}}],(n=[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){var e,t,n;return null!==(e=null===(t=this.props)||void 0===t||null===(n=t.nodeRef)||void 0===n?void 0:n.current)&&void 0!==e?e:l.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props,n=(t.axis,t.bounds,t.children),r=t.defaultPosition,o=t.defaultClassName,l=t.defaultClassNameDragging,c=t.defaultClassNameDragged,d=t.position,m=t.positionOffset,h=(t.scale,function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(t,p)),g={},b=null,w=!Boolean(d)||this.state.dragging,k=d||r,E={x:(0,s.canDragX)(this)&&w?this.state.x:k.x,y:(0,s.canDragY)(this)&&w?this.state.y:k.y};this.state.isElementSVG?b=(0,u.createSVGTransform)(E,m):g=(0,u.createCSSTransform)(E,m);var x=(0,i.default)(n.props.className||"",o,(C(e={},l,this.state.dragging),C(e,c,this.state.dragged),e));return a.createElement(f.default,v({},h,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),a.cloneElement(a.Children.only(n),{className:x,style:y(y({},n.props.style),g),transform:b}))}}])&&w(t.prototype,n),r&&w(t,r),h}(a.Component);t.default=_,C(_,"displayName","Draggable"),C(_,"propTypes",y(y({},f.default.propTypes),{},{axis:o.default.oneOf(["both","x","y","none"]),bounds:o.default.oneOfType([o.default.shape({left:o.default.number,right:o.default.number,top:o.default.number,bottom:o.default.number}),o.default.string,o.default.oneOf([!1])]),defaultClassName:o.default.string,defaultClassNameDragging:o.default.string,defaultClassNameDragged:o.default.string,defaultPosition:o.default.shape({x:o.default.number,y:o.default.number}),positionOffset:o.default.shape({x:o.default.oneOfType([o.default.number,o.default.string]),y:o.default.oneOfType([o.default.number,o.default.string])}),position:o.default.shape({x:o.default.number,y:o.default.number}),className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe})),C(_,"defaultProps",y(y({},f.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},scale:1}))},783:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=d(t);if(n&&n.has(e))return n.get(e);var a={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var i=o?Object.getOwnPropertyDescriptor(e,l):null;i&&(i.get||i.set)?Object.defineProperty(a,l,i):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a}(n(294)),o=f(n(697)),l=f(n(935)),i=n(825),u=n(849),s=n(280),c=f(n(904));function f(e){return e&&e.__esModule?e:{default:e}}function d(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(d=function(e){return e?n:t})(e)}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);l=!0);}catch(e){i=!0,a=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E={start:"touchstart",move:"touchmove",stop:"touchend"},x={start:"mousedown",move:"mousemove",stop:"mouseup"},S=x,C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(f,e);var t,n,r,o,s=(r=f,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function f(){var e;h(this,f);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return k(b(e=s.call.apply(s,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),k(b(e),"mounted",!1),k(b(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,i.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,i.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var a=(0,i.getTouchIdentifier)(t);e.setState({touchIdentifier:a});var o=(0,u.getControlPosition)(t,a,b(e));if(null!=o){var l=o.x,s=o.y,f=(0,u.createCoreData)(b(e),l,s);(0,c.default)("DraggableCore: handleDragStart: %j",f),(0,c.default)("calling",e.props.onStart),!1!==e.props.onStart(t,f)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,i.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:l,lastY:s}),(0,i.addEvent)(r,S.move,e.handleDrag),(0,i.addEvent)(r,S.stop,e.handleDragStop))}}})),k(b(e),"handleDrag",(function(t){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,a=n.y;if(Array.isArray(e.props.grid)){var o=r-e.state.lastX,l=a-e.state.lastY,i=p((0,u.snapToGrid)(e.props.grid,o,l),2);if(o=i[0],l=i[1],!o&&!l)return;r=e.state.lastX+o,a=e.state.lastY+l}var s=(0,u.createCoreData)(b(e),r,a);if((0,c.default)("DraggableCore: handleDrag: %j",s),!1!==e.props.onDrag(t,s)&&!1!==e.mounted)e.setState({lastX:r,lastY:a});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var f=document.createEvent("MouseEvents");f.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(f)}}})),k(b(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,u.getControlPosition)(t,e.state.touchIdentifier,b(e));if(null!=n){var r=n.x,a=n.y,o=(0,u.createCoreData)(b(e),r,a);if(!1===e.props.onStop(t,o)||!1===e.mounted)return!1;var l=e.findDOMNode();l&&e.props.enableUserSelectHack&&(0,i.removeUserSelectStyles)(l.ownerDocument),(0,c.default)("DraggableCore: handleDragStop: %j",o),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),l&&((0,c.default)("DraggableCore: Removing handlers"),(0,i.removeEvent)(l.ownerDocument,S.move,e.handleDrag),(0,i.removeEvent)(l.ownerDocument,S.stop,e.handleDragStop))}}})),k(b(e),"onMouseDown",(function(t){return S=x,e.handleDragStart(t)})),k(b(e),"onMouseUp",(function(t){return S=x,e.handleDragStop(t)})),k(b(e),"onTouchStart",(function(t){return S=E,e.handleDragStart(t)})),k(b(e),"onTouchEnd",(function(t){return S=E,e.handleDragStop(t)})),e}return t=f,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,i.addEvent)(e,E.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,i.removeEvent)(t,x.move,this.handleDrag),(0,i.removeEvent)(t,E.move,this.handleDrag),(0,i.removeEvent)(t,x.stop,this.handleDragStop),(0,i.removeEvent)(t,E.stop,this.handleDragStop),(0,i.removeEvent)(e,E.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,i.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){var e,t,n;return null!==(e=null===(t=this.props)||void 0===t||null===(n=t.nodeRef)||void 0===n?void 0:n.current)&&void 0!==e?e:l.default.findDOMNode(this)}},{key:"render",value:function(){return a.cloneElement(a.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&v(t.prototype,n),f}(a.Component);t.default=C,k(C,"displayName","DraggableCore"),k(C,"propTypes",{allowAnyClick:o.default.bool,disabled:o.default.bool,enableUserSelectHack:o.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:o.default.arrayOf(o.default.number),handle:o.default.string,cancel:o.default.string,nodeRef:o.default.object,onStart:o.default.func,onDrag:o.default.func,onStop:o.default.func,onMouseDown:o.default.func,scale:o.default.number,className:s.dontSetMe,style:s.dontSetMe,transform:s.dontSetMe}),k(C,"defaultProps",{allowAnyClick:!1,disabled:!1,enableUserSelectHack:!0,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},193:(e,t,n)=>{"use strict";var r=n(668),a=r.default,o=r.DraggableCore;e.exports=a,e.exports.default=a,e.exports.DraggableCore=o},825:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.matchesSelector=f,t.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(f(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},t.addEvent=function(e,t,n,r){if(e){var a=u({capture:!0},r);e.addEventListener?e.addEventListener(t,n,a):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n}},t.removeEvent=function(e,t,n,r){if(e){var a=u({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,a):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null}},t.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,a.int)(n.borderTopWidth))+(0,a.int)(n.borderBottomWidth)},t.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t+=(0,a.int)(n.borderLeftWidth))+(0,a.int)(n.borderRightWidth)},t.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,a.int)(n.paddingTop))-(0,a.int)(n.paddingBottom)},t.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return(t-=(0,a.int)(n.paddingLeft))-(0,a.int)(n.paddingRight)},t.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect();return{x:(e.clientX+t.scrollLeft-r.left)/n,y:(e.clientY+t.scrollTop-r.top)/n}},t.createCSSTransform=function(e,t){var n=d(e,t,"px");return s({},(0,o.browserPrefixToKey)("transform",o.default),n)},t.createSVGTransform=function(e,t){return d(e,t,"")},t.getTranslation=d,t.getTouch=function(e,t){return e.targetTouches&&(0,a.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,a.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},t.getTouchIdentifier=function(e){return e.targetTouches&&e.targetTouches[0]?e.targetTouches[0].identifier:e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].identifier:void 0},t.addUserSelectStyles=function(e){if(e){var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t)),e.body&&p(e.body,"react-draggable-transparent-selection")}},t.removeUserSelectStyles=function(e){if(e)try{if(e.body&&m(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},t.addClassName=p,t.removeClassName=m;var a=n(280),o=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=l(t);if(n&&n.has(e))return n.get(e);var a={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var u=o?Object.getOwnPropertyDescriptor(e,i):null;u&&(u.get||u.set)?Object.defineProperty(a,i,u):a[i]=e[i]}return a.default=e,n&&n.set(e,a),a}(n(650));function l(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(l=function(e){return e?n:t})(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c="";function f(e,t){return c||(c=(0,a.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,a.isFunction)(e[t])}))),!!(0,a.isFunction)(e[c])&&e[c](t)}function d(e,t,n){var r=e.x,a=e.y,o="translate(".concat(r).concat(n,",").concat(a).concat(n,")");if(t){var l="".concat("string"==typeof t.x?t.x:t.x+n),i="".concat("string"==typeof t.y?t.y:t.y+n);o="translate(".concat(l,", ").concat(i,")")+o}return o}function p(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function m(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}},650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefix=r,t.browserPrefixToKey=a,t.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},t.default=void 0;var n=["Moz","Webkit","O","ms"];function r(){var e,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window)return"";var o=null===(e=window.document)||void 0===e||null===(t=e.documentElement)||void 0===t?void 0:t.style;if(!o)return"";if(r in o)return"";for(var l=0;l<n.length;l++)if(a(r,n[l])in o)return n[l];return""}function a(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var o=r();t.default=o},904:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){}},849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var l=e.props.bounds;l="string"==typeof l?l:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(l);var i=o(e);if("string"==typeof l){var u,s=i.ownerDocument,c=s.defaultView;if(!((u="parent"===l?i.parentNode:s.querySelector(l))instanceof c.HTMLElement))throw new Error('Bounds selector "'+l+'" could not find an element.');var f=u,d=c.getComputedStyle(i),p=c.getComputedStyle(f);l={left:-i.offsetLeft+(0,r.int)(p.paddingLeft)+(0,r.int)(d.marginLeft),top:-i.offsetTop+(0,r.int)(p.paddingTop)+(0,r.int)(d.marginTop),right:(0,a.innerWidth)(f)-(0,a.outerWidth)(i)-i.offsetLeft+(0,r.int)(p.paddingRight)-(0,r.int)(d.marginRight),bottom:(0,a.innerHeight)(f)-(0,a.outerHeight)(i)-i.offsetTop+(0,r.int)(p.paddingBottom)-(0,r.int)(d.marginBottom)}}return(0,r.isNum)(l.right)&&(t=Math.min(t,l.right)),(0,r.isNum)(l.bottom)&&(n=Math.min(n,l.bottom)),(0,r.isNum)(l.left)&&(t=Math.max(t,l.left)),(0,r.isNum)(l.top)&&(n=Math.max(n,l.top)),[t,n]},t.snapToGrid=function(e,t,n){return[Math.round(t/e[0])*e[0],Math.round(n/e[1])*e[1]]},t.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},t.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},t.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,a.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var l=o(n),i=n.props.offsetParent||l.offsetParent||l.ownerDocument.body;return(0,a.offsetXYFromParent)(r||e,i,n.props.scale)},t.createCoreData=function(e,t,n){var a=e.state,l=!(0,r.isNum)(a.lastX),i=o(e);return l?{node:i,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:i,deltaX:t-a.lastX,deltaY:n-a.lastY,lastX:a.lastX,lastY:a.lastY,x:t,y:n}},t.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var r=n(280),a=n(825);function o(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}},280:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},t.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},t.isNum=function(e){return"number"==typeof e&&!isNaN(e)},t.int=function(e){return parseInt(e,10)},t.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))}},251:(e,t,n)=>{"use strict";n(418);var r=n(294),a=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var o=Symbol.for;a=o("react.element"),t.Fragment=o("react.fragment")}var l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i=Object.prototype.hasOwnProperty,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,o={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:o,_owner:l.current}}t.jsx=s,t.jsxs=s},408:(e,t,n)=>{"use strict";var r=n(418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var l=60109,i=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),l=f("react.provider"),i=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function v(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,o={},l=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:l,ref:i,props:o,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var C=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case o:u=!0}}if(u)return l=l(u=e),e=""===r?"."+_(u,0):r,Array.isArray(l)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),O(l,t,n,"",(function(e){return e}))):null!=l&&(S(l)&&(l=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,n+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(C,"$&/")+"/")+e)),t.push(l)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+_(i=e[s],s);u+=O(i,t,n,c,l)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(i=e.next()).done;)u+=O(i=i.value,t,n,c=r+_(i,s++),l);else if("object"===i)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function j(){var e=T.current;if(null===e)throw Error(p(321));return e}var D={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),l=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=w.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:a,type:e.type,key:l,ref:i,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return j().useCallback(e,t)},t.useContext=function(e,t){return j().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return j().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return j().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return j().useLayoutEffect(e,t)},t.useMemo=function(e,t){return j().useMemo(e,t)},t.useReducer=function(e,t,n){return j().useReducer(e,t,n)},t.useRef=function(e){return j().useRef(e)},t.useState=function(e){return j().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?k.postMessage(null):(h=!1,v=null)}catch(e){throw k.postMessage(null),e}}else h=!1},n=function(e){v=e,h||(h=!0,k.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<C(a,t)))break e;e[r]=t,e[n]=a,n=r}}function x(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,l=e[o],i=o+1,u=e[i];if(void 0!==l&&0>C(l,n))void 0!==u&&0>C(u,l)?(e[r]=u,e[i]=n,r=i):(e[r]=l,e[o]=n,r=o);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[i]=n,r=i}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],O=[],N=1,P=null,T=3,j=!1,D=!1,M=!1;function R(e){for(var t=x(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,E(_,t)}t=x(O)}}function L(e){if(M=!1,R(e),!D)if(null!==x(_))D=!0,n(I);else{var t=x(O);null!==t&&r(L,t.startTime-e)}}function I(e,n){D=!1,M&&(M=!1,a()),j=!0;var o=T;try{for(R(n),P=x(_);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var l=P.callback;if("function"==typeof l){P.callback=null,T=P.priorityLevel;var i=l(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?P.callback=i:P===x(_)&&S(_),R(n)}else S(_);P=x(_)}if(null!==P)var u=!0;else{var s=x(O);null!==s&&r(L,s.startTime-n),u=!1}return u}finally{P=null,T=o,j=!1}}var A=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||j||(D=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return x(_)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=A,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,o,l){var i=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?i+l:i,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:N++,callback:o,priorityLevel:e,startTime:l,expirationTime:u=l+u,sortIndex:-1},l>i?(e.sortIndex=l,E(O,e),null===x(_)&&e===x(O)&&(M?a():M=!0,r(L,l-i))):(e.sortIndex=u,E(_,e),D||j||(D=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:m,references:1})}l.push(f)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},473:e=>{"use strict";e.exports=function(){}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(294),t=n(935),r=n(193),a=n.n(r),o=n(379),l=n.n(o),i=n(795),u=n.n(i),s=n(569),c=n.n(s),f=n(565),d=n.n(f),p=n(216),m=n.n(p),h=n(589),v=n.n(h),g=n(87),y={};y.styleTagTransform=v(),y.setAttributes=d(),y.insert=c().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=m(),l()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;var b=n(184),w=n.n(b),k=n(893);const E=e.createContext({prefixes:{}}),{Consumer:x,Provider:S}=E;function C(t,n){const{prefixes:r}=(0,e.useContext)(E);return t||r[n]||n}const _=["xxl","xl","lg","md","sm","xs"],O=e.forwardRef((({bsPrefix:e,className:t,as:n="div",...r},a)=>{const o=C(e,"row"),l=`${o}-cols`,i=[];return _.forEach((e=>{const t=r[e];let n;delete r[e],null!=t&&"object"==typeof t?({cols:n}=t):n=t;const a="xs"!==e?`-${e}`:"";null!=n&&i.push(`${l}${a}-${n}`)})),(0,k.jsx)(n,{ref:a,...r,className:w()(t,o,...i)})}));O.displayName="Row";const N=O,P=["xxl","xl","lg","md","sm","xs"],T=e.forwardRef(((e,t)=>{const[{className:n,...r},{as:a="div",bsPrefix:o,spans:l}]=function({as:e,bsPrefix:t,className:n,...r}){t=C(t,"col");const a=[],o=[];return P.forEach((e=>{const n=r[e];let l,i,u;delete r[e],"object"==typeof n&&null!=n?({span:l,offset:i,order:u}=n):l=n;const s="xs"!==e?`-${e}`:"";l&&a.push(!0===l?`${t}${s}`:`${t}${s}-${l}`),null!=u&&o.push(`order${s}-${u}`),null!=i&&o.push(`offset${s}-${i}`)})),[{...r,className:w()(n,...a,...o)},{as:e,bsPrefix:t,spans:a}]}(e);return(0,k.jsx)(a,{...r,ref:t,className:w()(n,!l.length&&o)})}));T.displayName="Col";const j=T,D=["as","disabled"];function M({tagName:e,disabled:t,href:n,target:r,rel:a,onClick:o,tabIndex:l=0,type:i}){e||(e=null!=n||null!=r||null!=a?"a":"button");const u={tagName:e};if("button"===e)return[{type:i||"button",disabled:t},u];const s=r=>{(t||"a"===e&&function(e){return!e||"#"===e.trim()}(n))&&r.preventDefault(),t?r.stopPropagation():null==o||o(r)};return[{role:"button",disabled:void 0,tabIndex:t?void 0:l,href:"a"===e&&t?void 0:n,target:"a"===e?r:void 0,"aria-disabled":t||void 0,rel:"a"===e?a:void 0,onClick:s,onKeyDown:e=>{" "===e.key&&(e.preventDefault(),s(e))}},u]}const R=e.forwardRef(((e,t)=>{let{as:n,disabled:r}=e,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,D);const[o,{tagName:l}]=M(Object.assign({tagName:n,disabled:r},a));return(0,k.jsx)(l,Object.assign({},a,o,{ref:t}))}));R.displayName="Button";const L=R,I=e.forwardRef((({as:e,bsPrefix:t,variant:n,size:r,active:a,className:o,...l},i)=>{const u=C(t,"btn"),[s,{tagName:c}]=M({tagName:e,...l}),f=c;return(0,k.jsx)(f,{...l,...s,ref:i,className:w()(o,u,a&&"active",n&&`${u}-${n}`,r&&`${u}-${r}`,l.href&&l.disabled&&"disabled")})}));I.displayName="Button",I.defaultProps={variant:"primary",active:!1,disabled:!1};const A=I;var z=n(697),F=n.n(z);const U={type:F().string,tooltip:F().bool,as:F().elementType},$=e.forwardRef((({as:e="div",className:t,type:n="valid",tooltip:r=!1,...a},o)=>(0,k.jsx)(e,{...a,ref:o,className:w()(t,`${n}-${r?"tooltip":"feedback"}`)})));$.displayName="Feedback",$.propTypes=U;const B=$,V=e.createContext({}),W=e.forwardRef((({id:t,bsPrefix:n,className:r,type:a="checkbox",isValid:o=!1,isInvalid:l=!1,as:i="input",...u},s)=>{const{controlId:c}=(0,e.useContext)(V);return n=C(n,"form-check-input"),(0,k.jsx)(i,{...u,ref:s,type:a,id:t||c,className:w()(r,n,o&&"is-valid",l&&"is-invalid")})}));W.displayName="FormCheckInput";const H=W,K=e.forwardRef((({bsPrefix:t,className:n,htmlFor:r,...a},o)=>{const{controlId:l}=(0,e.useContext)(V);return t=C(t,"form-check-label"),(0,k.jsx)("label",{...a,ref:o,htmlFor:r||l,className:w()(n,t)})}));K.displayName="FormCheckLabel";const Y=K;function Q(t,n){let r=0;return e.Children.map(t,(t=>e.isValidElement(t)?n(t,r++):t))}const X=e.forwardRef((({id:t,bsPrefix:n,bsSwitchPrefix:r,inline:a=!1,disabled:o=!1,isValid:l=!1,isInvalid:i=!1,feedbackTooltip:u=!1,feedback:s,feedbackType:c,className:f,style:d,title:p="",type:m="checkbox",label:h,children:v,as:g="input",...y},b)=>{n=C(n,"form-check"),r=C(r,"form-switch");const{controlId:E}=(0,e.useContext)(V),x=(0,e.useMemo)((()=>({controlId:t||E})),[E,t]),S=!v&&null!=h&&!1!==h||function(t,n){return e.Children.toArray(t).some((t=>e.isValidElement(t)&&t.type===n))}(v,Y),_=(0,k.jsx)(H,{...y,type:"switch"===m?"checkbox":m,ref:b,isValid:l,isInvalid:i,disabled:o,as:g});return(0,k.jsx)(V.Provider,{value:x,children:(0,k.jsx)("div",{style:d,className:w()(f,S&&n,a&&`${n}-inline`,"switch"===m&&r),children:v||(0,k.jsxs)(k.Fragment,{children:[_,S&&(0,k.jsx)(Y,{title:p,children:h}),s&&(0,k.jsx)(B,{type:c,tooltip:u,children:s})]})})})}));X.displayName="FormCheck";const q=Object.assign(X,{Input:H,Label:Y});n(473);const G=e.forwardRef((({bsPrefix:t,type:n,size:r,htmlSize:a,id:o,className:l,isValid:i=!1,isInvalid:u=!1,plaintext:s,readOnly:c,as:f="input",...d},p)=>{const{controlId:m}=(0,e.useContext)(V);let h;return t=C(t,"form-control"),h=s?{[`${t}-plaintext`]:!0}:{[t]:!0,[`${t}-${r}`]:r},(0,k.jsx)(f,{...d,type:n,size:a,ref:p,readOnly:c,id:o||m,className:w()(l,h,i&&"is-valid",u&&"is-invalid","color"===n&&`${t}-color`)})}));G.displayName="FormControl";const Z=Object.assign(G,{Feedback:B});var J=/-(.)/g;const ee=e=>{return e[0].toUpperCase()+(t=e,t.replace(J,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function te(t,{displayName:n=ee(t),Component:r,defaultProps:a}={}){const o=e.forwardRef((({className:e,bsPrefix:n,as:a=r||"div",...o},l)=>{const i=C(n,t);return(0,k.jsx)(a,{ref:l,className:w()(e,i),...o})}));return o.defaultProps=a,o.displayName=n,o}const ne=te("form-floating"),re=e.forwardRef((({controlId:t,as:n="div",...r},a)=>{const o=(0,e.useMemo)((()=>({controlId:t})),[t]);return(0,k.jsx)(V.Provider,{value:o,children:(0,k.jsx)(n,{...r,ref:a})})}));re.displayName="FormGroup";const ae=re,oe=e.forwardRef((({as:t="label",bsPrefix:n,column:r,visuallyHidden:a,className:o,htmlFor:l,...i},u)=>{const{controlId:s}=(0,e.useContext)(V);n=C(n,"form-label");let c="col-form-label";"string"==typeof r&&(c=`${c} ${c}-${r}`);const f=w()(o,n,a&&"visually-hidden",r&&c);return l=l||s,r?(0,k.jsx)(j,{ref:u,as:"label",className:f,htmlFor:l,...i}):(0,k.jsx)(t,{ref:u,className:f,htmlFor:l,...i})}));oe.displayName="FormLabel",oe.defaultProps={column:!1,visuallyHidden:!1};const le=oe,ie=e.forwardRef((({bsPrefix:t,className:n,id:r,...a},o)=>{const{controlId:l}=(0,e.useContext)(V);return t=C(t,"form-range"),(0,k.jsx)("input",{...a,type:"range",ref:o,className:w()(n,t),id:r||l})}));ie.displayName="FormRange";const ue=ie,se=e.forwardRef((({bsPrefix:t,size:n,htmlSize:r,className:a,isValid:o=!1,isInvalid:l=!1,id:i,...u},s)=>{const{controlId:c}=(0,e.useContext)(V);return t=C(t,"form-select"),(0,k.jsx)("select",{...u,size:r,ref:s,className:w()(a,t,n&&`${t}-${n}`,o&&"is-valid",l&&"is-invalid"),id:i||c})}));se.displayName="FormSelect";const ce=se,fe=e.forwardRef((({bsPrefix:e,className:t,as:n="small",muted:r,...a},o)=>(e=C(e,"form-text"),(0,k.jsx)(n,{...a,ref:o,className:w()(t,e,r&&"text-muted")}))));fe.displayName="FormText";const de=fe,pe=e.forwardRef(((e,t)=>(0,k.jsx)(q,{...e,ref:t,type:"switch"})));pe.displayName="Switch";const me=Object.assign(pe,{Input:q.Input,Label:q.Label}),he=e.forwardRef((({bsPrefix:e,className:t,children:n,controlId:r,label:a,...o},l)=>(e=C(e,"form-floating"),(0,k.jsxs)(ae,{ref:l,className:w()(t,e),controlId:r,...o,children:[n,(0,k.jsx)("label",{htmlFor:r,children:a})]}))));he.displayName="FloatingLabel";const ve=he,ge={_ref:F().any,validated:F().bool,as:F().elementType},ye=e.forwardRef((({className:e,validated:t,as:n="form",...r},a)=>(0,k.jsx)(n,{...r,ref:a,className:w()(e,t&&"was-validated")})));ye.displayName="Form",ye.propTypes=ge;const be=Object.assign(ye,{Group:ae,Control:Z,Floating:ne,Check:q,Switch:me,Label:le,Text:de,Range:ue,Select:ce,FloatingLabel:ve});function we(){return(we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ke(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function Ee(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function xe(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t);if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function Se(t,n,r){var a=(0,e.useRef)(void 0!==t),o=(0,e.useState)(n),l=o[0],i=o[1],u=void 0!==t,s=a.current;return a.current=u,!u&&s&&l!==n&&i(n),[u?t:l,(0,e.useCallback)((function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];r&&r.apply(void 0,[e].concat(n)),i(e)}),[r])]}function Ce(e,t){return Object.keys(t).reduce((function(n,r){var a,o=n,l=o[Ee(r)],i=o[r],u=ke(o,[Ee(r),r].map(xe)),s=t[r],c=Se(i,l,e[s]),f=c[0],d=c[1];return we({},u,((a={})[r]=f,a[s]=d,a))}),e)}n(143);const _e={prefix:String(Math.round(1e10*Math.random())),current:0},Oe=e.createContext(_e);let Ne=Boolean("undefined"!=typeof window&&window.document&&window.document.createElement);const Pe=e.createContext(null),Te=(e,t=null)=>null!=e?String(e):t||null,je=e.createContext(null),De=function({children:t,in:n,mountOnEnter:r,unmountOnExit:a}){const o=(0,e.useRef)(n);return(0,e.useEffect)((()=>{n&&(o.current=!0)}),[n]),n?t:a||!o.current&&r?null:t},Me=["active","eventKey","mountOnEnter","transition","unmountOnExit"],Re=["activeKey","getControlledId","getControllerId"],Le=["as"];function Ie(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function Ae(t){let{active:n,eventKey:r,mountOnEnter:a,transition:o,unmountOnExit:l}=t,i=Ie(t,Me);const u=(0,e.useContext)(Pe);if(!u)return[i,{eventKey:r,isActive:n,mountOnEnter:a,transition:o,unmountOnExit:l}];const{activeKey:s,getControlledId:c,getControllerId:f}=u,d=Ie(u,Re),p=Te(r);return[Object.assign({},i,{id:c(r),"aria-labelledby":f(r)}),{eventKey:r,isActive:null==n&&null!=p?Te(s)===p:n,transition:o||d.transition,mountOnEnter:null!=a?a:d.mountOnEnter,unmountOnExit:null!=l?l:d.unmountOnExit}]}const ze=e.forwardRef(((e,t)=>{let{as:n="div"}=e,r=Ie(e,Le);const[a,{isActive:o,onEnter:l,onEntering:i,onEntered:u,onExit:s,onExiting:c,onExited:f,mountOnEnter:d,unmountOnExit:p,transition:m=De}]=Ae(r);return(0,k.jsx)(Pe.Provider,{value:null,children:(0,k.jsx)(je.Provider,{value:null,children:(0,k.jsx)(m,{in:o,onEnter:l,onEntering:i,onEntered:u,onExit:s,onExiting:c,onExited:f,mountOnEnter:d,unmountOnExit:p,children:(0,k.jsx)(n,Object.assign({},a,{ref:t,role:"tabpanel",hidden:!o,"aria-hidden":!o}))})})})}));ze.displayName="TabPanel";const Fe=t=>{const{id:n,generateChildId:r,onSelect:a,activeKey:o,defaultActiveKey:l,transition:i,mountOnEnter:u,unmountOnExit:s,children:c}=t,[f,d]=Se(o,l,a),p=function(t){let n=(0,e.useContext)(Oe);return n!==_e||Ne||console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server."),(0,e.useMemo)((()=>t||"react-aria"+n.prefix+"-"+ ++n.current),[t])}(n),m=(0,e.useMemo)((()=>r||((e,t)=>p?`${p}-${t}-${e}`:null)),[p,r]),h=(0,e.useMemo)((()=>({onSelect:d,activeKey:f,transition:i,mountOnEnter:u||!1,unmountOnExit:s||!1,getControlledId:e=>m(e,"tabpane"),getControllerId:e=>m(e,"tab")})),[d,f,i,u,s,m]);return(0,k.jsx)(Pe.Provider,{value:h,children:(0,k.jsx)(je.Provider,{value:d||null,children:c})})};Fe.Panel=ze;const Ue=Fe;n(391);var $e=Function.prototype.bind.call(Function.prototype.call,[].slice),Be=function(e){return e&&"function"!=typeof e?function(t){e.current=t}:e};const Ve=e.createContext(null);Ve.displayName="NavContext";const We=Ve;function He(e){return`data-rr-ui-${e}`}function Ke(t){var n=function(t){var n=(0,e.useRef)(t);return(0,e.useEffect)((function(){n.current=t}),[t]),n}(t);return(0,e.useCallback)((function(){return n.current&&n.current.apply(n,arguments)}),[n])}const Ye=["as","active","eventKey"];function Qe({key:t,onClick:n,active:r,id:a,role:o,disabled:l}){const i=(0,e.useContext)(je),u=(0,e.useContext)(We);let s=r;const c={role:o};if(u){o||"tablist"!==u.role||(c.role="tab");const e=u.getControllerId(null!=t?t:null),n=u.getControlledId(null!=t?t:null);c[He("event-key")]=t,c.id=e||a,c["aria-controls"]=n,s=null==r&&null!=t?u.activeKey===t:r}return"tab"===c.role&&(l&&(c.tabIndex=-1,c["aria-disabled"]=!0),s?c["aria-selected"]=s:c.tabIndex=-1),c.onClick=Ke((e=>{l||(null==n||n(e),null!=t&&i&&!e.isPropagationStopped()&&i(t,e))})),[c,{isActive:s}]}const Xe=e.forwardRef(((e,t)=>{let{as:n=L,active:r,eventKey:a}=e,o=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,Ye);const[l,i]=Qe(Object.assign({key:Te(a,o.href),active:r},o));return l[He("active")]=i.isActive,(0,k.jsx)(n,Object.assign({},o,l,{ref:t}))}));Xe.displayName="NavItem";const qe=Xe,Ge=["as","onSelect","activeKey","role","onKeyDown"],Ze=()=>{},Je=He("event-key"),et=e.forwardRef(((t,n)=>{let{as:r="div",onSelect:a,activeKey:o,role:l,onKeyDown:i}=t,u=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(t,Ge);const s=(0,e.useReducer)((function(e){return!e}),!1)[1],c=(0,e.useRef)(!1),f=(0,e.useContext)(je),d=(0,e.useContext)(Pe);let p,m;d&&(l=l||"tablist",o=d.activeKey,p=d.getControlledId,m=d.getControllerId);const h=(0,e.useRef)(null),v=e=>{const t=h.current;if(!t)return null;const n=(r=`[${Je}]:not([aria-disabled=true])`,$e(t.querySelectorAll(r)));var r;const a=t.querySelector("[aria-selected=true]");if(!a)return null;const o=n.indexOf(a);if(-1===o)return null;let l=o+e;return l>=n.length&&(l=0),l<0&&(l=n.length-1),n[l]},g=(e,t)=>{null!=e&&(null==a||a(e,t),null==f||f(e,t))};(0,e.useEffect)((()=>{if(h.current&&c.current){const e=h.current.querySelector(`[${Je}][aria-selected=true]`);null==e||e.focus()}c.current=!1}));const y=(b=n,w=h,(0,e.useMemo)((function(){return function(e,t){var n=Be(e),r=Be(t);return function(e){n&&n(e),r&&r(e)}}(b,w)}),[b,w]));var b,w;return(0,k.jsx)(je.Provider,{value:g,children:(0,k.jsx)(We.Provider,{value:{role:l,activeKey:Te(o),getControlledId:p||Ze,getControllerId:m||Ze},children:(0,k.jsx)(r,Object.assign({},u,{onKeyDown:e=>{if(null==i||i(e),!d)return;let t;switch(e.key){case"ArrowLeft":case"ArrowUp":t=v(-1);break;case"ArrowRight":case"ArrowDown":t=v(1);break;default:return}t&&(e.preventDefault(),g(t.dataset[("EventKey","rrUiEventKey")]||null,e),c.current=!0,s())},ref:y,role:l}))})})}));et.displayName="Nav";const tt=Object.assign(et,{Item:qe}),nt=e.createContext(null);nt.displayName="NavbarContext";const rt=nt,at=e.createContext(null);at.displayName="CardHeaderContext";const ot=at,lt=te("nav-item");var it=void 0!==n.g&&n.g.navigator&&"ReactNative"===n.g.navigator.product;"undefined"!=typeof document||it?e.useLayoutEffect:e.useEffect,new WeakMap;const ut=["onKeyDown"],st=e.forwardRef(((e,t)=>{let{onKeyDown:n}=e,r=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,ut);const[a]=M(Object.assign({tagName:"a"},r)),o=Ke((e=>{a.onKeyDown(e),null==n||n(e)}));return((l=r.href)&&"#"!==l.trim()||r.role)&&"button"!==r.role?(0,k.jsx)("a",Object.assign({ref:t},r,{onKeyDown:n})):(0,k.jsx)("a",Object.assign({ref:t},r,a,{onKeyDown:o}));var l}));st.displayName="Anchor";const ct=st,ft=e.forwardRef((({bsPrefix:e,className:t,as:n=ct,active:r,eventKey:a,...o},l)=>{e=C(e,"nav-link");const[i,u]=Qe({key:Te(a,o.href),active:r,...o});return(0,k.jsx)(n,{...o,...i,ref:l,className:w()(t,e,o.disabled&&"disabled",u.isActive&&"active")})}));ft.displayName="NavLink",ft.defaultProps={disabled:!1};const dt=ft,pt=e.forwardRef(((t,n)=>{const{as:r="div",bsPrefix:a,variant:o,fill:l,justify:i,navbar:u,navbarScroll:s,className:c,activeKey:f,...d}=Ce(t,{activeKey:"onSelect"}),p=C(a,"nav");let m,h,v=!1;const g=(0,e.useContext)(rt),y=(0,e.useContext)(ot);return g?(m=g.bsPrefix,v=null==u||u):y&&({cardHeaderBsPrefix:h}=y),(0,k.jsx)(tt,{as:r,ref:n,activeKey:f,className:w()(c,{[p]:!v,[`${m}-nav`]:v,[`${m}-nav-scroll`]:v&&s,[`${h}-${o}`]:!!h,[`${p}-${o}`]:!!o,[`${p}-fill`]:l,[`${p}-justified`]:i}),...d})}));pt.displayName="Nav",pt.defaultProps={justify:!1,fill:!1};const mt=Object.assign(pt,{Item:lt,Link:dt}),ht=te("tab-content");function vt(e,t){return(vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}const gt=e.createContext(null);var yt="unmounted",bt="exited",wt="entering",kt="entered",Et="exiting",xt=function(n){var r,a;function o(e,t){var r;r=n.call(this,e,t)||this;var a,o=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?o?(a=bt,r.appearStatus=wt):a=kt:a=e.unmountOnExit||e.mountOnEnter?yt:bt,r.state={status:a},r.nextCallback=null,r}a=n,(r=o).prototype=Object.create(a.prototype),r.prototype.constructor=r,vt(r,a),o.getDerivedStateFromProps=function(e,t){return e.in&&t.status===yt?{status:bt}:null};var l=o.prototype;return l.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},l.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==wt&&n!==kt&&(t=wt):n!==wt&&n!==kt||(t=Et)}this.updateStatus(!1,t)},l.componentWillUnmount=function(){this.cancelNextCallback()},l.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},l.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===wt?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===bt&&this.setState({status:yt})},l.performEnter=function(e){var n=this,r=this.props.enter,a=this.context?this.context.isMounting:e,o=this.props.nodeRef?[a]:[t.findDOMNode(this),a],l=o[0],i=o[1],u=this.getTimeouts(),s=a?u.appear:u.enter;e||r?(this.props.onEnter(l,i),this.safeSetState({status:wt},(function(){n.props.onEntering(l,i),n.onTransitionEnd(s,(function(){n.safeSetState({status:kt},(function(){n.props.onEntered(l,i)}))}))}))):this.safeSetState({status:kt},(function(){n.props.onEntered(l)}))},l.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),a=this.props.nodeRef?void 0:t.findDOMNode(this);n?(this.props.onExit(a),this.safeSetState({status:Et},(function(){e.props.onExiting(a),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:bt},(function(){e.props.onExited(a)}))}))}))):this.safeSetState({status:bt},(function(){e.props.onExited(a)}))},l.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},l.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},l.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},l.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),a=null==e&&!this.props.addEndListener;if(r&&!a){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],l=o[0],i=o[1];this.props.addEndListener(l,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},l.render=function(){var t=this.state.status;if(t===yt)return null;var n=this.props,r=n.children,a=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,ke(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(gt.Provider,{value:null},"function"==typeof r?r(t,a):e.cloneElement(e.Children.only(r),a))},o}(e.Component);function St(){}xt.contextType=gt,xt.propTypes={},xt.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:St,onEntering:St,onEntered:St,onExit:St,onExiting:St,onExited:St},xt.UNMOUNTED=yt,xt.EXITED=bt,xt.ENTERING=wt,xt.ENTERED=kt,xt.EXITING=Et;const Ct=xt;var _t=/([A-Z])/g,Ot=/^ms-/;function Nt(e){return function(e){return e.replace(_t,"-$1").toLowerCase()}(e).replace(Ot,"-ms-")}var Pt=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;const Tt=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(Nt(t))||function(e,t){return function(e){var t=function(e){return e&&e.ownerDocument||document}(e);return t&&t.defaultView||window}(e).getComputedStyle(e,void 0)}(e).getPropertyValue(Nt(t));Object.keys(t).forEach((function(a){var o=t[a];o||0===o?function(e){return!(!e||!Pt.test(e))}(a)?r+=a+"("+o+") ":n+=Nt(a)+": "+o+";":e.style.removeProperty(Nt(a))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n},jt=!("undefined"==typeof window||!window.document||!window.document.createElement);var Dt=!1,Mt=!1;try{var Rt={get passive(){return Dt=!0},get once(){return Mt=Dt=!0}};jt&&(window.addEventListener("test",Rt,Rt),window.removeEventListener("test",Rt,!0))}catch(e){}const Lt=function(e,t,n,r){return function(e,t,n,r){if(r&&"boolean"!=typeof r&&!Mt){var a=r.once,o=r.capture,l=n;!Mt&&a&&(l=n.__once||function e(r){this.removeEventListener(t,e,o),n.call(this,r)},n.__once=l),e.addEventListener(t,l,Dt?r:o)}e.addEventListener(t,n,r)}(e,t,n,r),function(){!function(e,t,n,r){var a=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,a),n.__once&&e.removeEventListener(t,n.__once,a)}(e,t,n,r)}};function It(e,t,n,r){var a,o;null==n&&(o=-1===(a=Tt(e,"transitionDuration")||"").indexOf("ms")?1e3:1,n=parseFloat(a)*o||0);var l=function(e,t,n){void 0===n&&(n=5);var r=!1,a=setTimeout((function(){r||function(e,t,n,r){if(void 0===n&&(n=!1),void 0===r&&(r=!0),e){var a=document.createEvent("HTMLEvents");a.initEvent("transitionend",n,r),e.dispatchEvent(a)}}(e,0,!0)}),t+n),o=Lt(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(a),o()}}(e,n,r),i=Lt(e,"transitionend",t);return function(){l(),i()}}function At(e,t){const n=Tt(e,t)||"",r=-1===n.indexOf("ms")?1e3:1;return parseFloat(n)*r}function zt(e,t){const n=At(e,"transitionDuration"),r=At(e,"transitionDelay"),a=It(e,(n=>{n.target===e&&(a(),t(n))}),n+r)}var Ft=function(e){return e&&"function"!=typeof e?function(t){e.current=t}:e};const Ut=e.forwardRef((({onEnter:n,onEntering:r,onEntered:a,onExit:o,onExiting:l,onExited:i,addEndListener:u,children:s,childRef:c,...f},d)=>{const p=(0,e.useRef)(null),m=(C=p,_=c,(0,e.useMemo)((function(){return function(e,t){var n=Ft(e),r=Ft(t);return function(e){n&&n(e),r&&r(e)}}(C,_)}),[C,_])),h=e=>{var n;m((n=e)&&"setState"in n?t.findDOMNode(n):null!=n?n:null)},v=e=>t=>{e&&p.current&&e(p.current,t)},g=(0,e.useCallback)(v(n),[n]),y=(0,e.useCallback)(v(r),[r]),b=(0,e.useCallback)(v(a),[a]),w=(0,e.useCallback)(v(o),[o]),E=(0,e.useCallback)(v(l),[l]),x=(0,e.useCallback)(v(i),[i]),S=(0,e.useCallback)(v(u),[u]);var C,_;return(0,k.jsx)(Ct,{ref:d,...f,onEnter:g,onEntered:b,onEntering:y,onExit:w,onExited:x,onExiting:E,addEndListener:S,nodeRef:p,children:"function"==typeof s?(e,t)=>s(e,{...t,ref:h}):e.cloneElement(s,{ref:h})})})),$t={[wt]:"show",[kt]:"show"},Bt=e.forwardRef((({className:t,children:n,transitionClasses:r={},...a},o)=>{const l=(0,e.useCallback)(((e,t)=>{!function(e){e.offsetHeight}(e),null==a.onEnter||a.onEnter(e,t)}),[a]);return(0,k.jsx)(Ut,{ref:o,addEndListener:zt,...a,onEnter:l,childRef:n.ref,children:(a,o)=>e.cloneElement(n,{...o,className:w()("fade",t,n.props.className,$t[a],r[a])})})}));Bt.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},Bt.displayName="Fade";const Vt=Bt;function Wt(e){return"boolean"==typeof e?e?Vt:void 0:e}const Ht=e.forwardRef((({bsPrefix:e,transition:t,...n},r)=>{const[{className:a,as:o="div",...l},{isActive:i,onEnter:u,onEntering:s,onEntered:c,onExit:f,onExiting:d,onExited:p,mountOnEnter:m,unmountOnExit:h,transition:v=De}]=Ae({...n,transition:Wt(t)}),g=C(e,"tab-pane");return(0,k.jsx)(Pe.Provider,{value:null,children:(0,k.jsx)(je.Provider,{value:null,children:(0,k.jsx)(v,{in:i,onEnter:u,onEntering:s,onEntered:c,onExit:f,onExiting:d,onExited:p,mountOnEnter:m,unmountOnExit:h,children:(0,k.jsx)(o,{...l,ref:r,className:w()(a,g,i&&"active")})})})})}));Ht.displayName="TabPane";const Kt=Ht;function Yt(t){let n;return function(t,r){e.Children.forEach(t,(t=>{e.isValidElement(t)&&(e=>{null==n&&(n=e.props.eventKey)})(t)}))}(t),n}function Qt(e){const{title:t,eventKey:n,disabled:r,tabClassName:a,id:o}=e.props;return null==t?null:(0,k.jsx)(lt,{as:"li",role:"presentation",children:(0,k.jsx)(dt,{as:"button",type:"button",eventKey:n,disabled:r,id:o,className:a,children:t})})}const Xt=e=>{const{id:t,onSelect:n,transition:r,mountOnEnter:a,unmountOnExit:o,children:l,activeKey:i=Yt(l),...u}=Ce(e,{activeKey:"onSelect"});return(0,k.jsxs)(Ue,{id:t,activeKey:i,onSelect:n,transition:Wt(r),mountOnEnter:a,unmountOnExit:o,children:[(0,k.jsx)(mt,{...u,role:"tablist",as:"ul",children:Q(l,Qt)}),(0,k.jsx)(ht,{children:Q(l,(e=>{const t={...e.props};return delete t.title,delete t.disabled,delete t.tabClassName,(0,k.jsx)(Kt,{...t})}))})]})};Xt.defaultProps={variant:"tabs",mountOnEnter:!1,unmountOnExit:!1},Xt.displayName="Tabs";const qt=Xt,Gt=({transition:e,...t})=>(0,k.jsx)(Ue,{...t,transition:Wt(e)});Gt.displayName="TabContainer";const Zt=Gt,Jt={eventKey:F().oneOfType([F().string,F().number]),title:F().node.isRequired,disabled:F().bool,tabClassName:F().string},en=()=>{throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly")};en.propTypes=Jt;const tn=Object.assign(en,{Container:Zt,Content:ht,Pane:Kt}),nn=JSON.parse(GM_getResourceText("character")),rn=JSON.parse(GM_getResourceText("weapon"));GM_addStyle(GM_getResourceText("css"));const an=[{element_attr_id:1,name:"pyro"},{element_attr_id:2,name:"anemo"},{element_attr_id:3,name:"geo"},{element_attr_id:4,name:"electro"},{element_attr_id:5,name:"hydro"},{element_attr_id:6,name:"cryo"},{element_attr_id:7,name:"dendro"}],on=()=>vue.goals,ln=()=>Object.keys(vue.inactive)||[],un=e=>{vue.addGoal(e)},sn=(e,t,n,r)=>{let a=on();const o=a.map((e=>e.id)),l=Math.max(...o)+1||1,i=a.findIndex("character"==r?e=>e.type==r&&e.character==t:e=>e.type==r&&e.weapon==t),u=fn(e,n);let s;if(i<0)s="character"==r?{type:r,character:t,current:u,goal:u,id:l}:{type:r,character:"",weapon:t,current:u,goal:u,id:l};else{const e=a[i],{goal:t,current:n}=e,{level:r,asc:o}=n,{level:l,asc:c}=t,{level:f,asc:d}=u;s=Object.assign(Object.assign({},e),{current:f>=r&&d>=o?u:n,goal:f>=l&&d>=c?u:t})}un(s)};const cn=[{level:1,asc:0,text:"1"},{level:20,asc:0,text:"20"},{level:20,asc:1,text:"20 A"},{level:40,asc:1,text:"40"},{level:40,asc:2,text:"40 A"},{level:50,asc:2,text:"50"},{level:50,asc:3,text:"50 A"},{level:60,asc:3,text:"60"},{level:60,asc:4,text:"60 A"},{level:70,asc:4,text:"70"},{level:70,asc:5,text:"70 A"},{level:80,asc:5,text:"80"},{level:80,asc:6,text:"80 A"},{level:90,asc:6,text:"90"}],fn=(e,t)=>{let n=cn[0];if(e<20)return n;for(let r of cn){const{level:a}=r;if(e<a){const{asc:e,text:t}=n;return Object.assign(Object.assign({},n),{asc:e+1,text:`${t} A`})}if(e==a)return 90!=e&&console.log(`米游社数据无法判断是否突破,请自行比较${t}是否已突破`),r;e>=a&&(n=r)}return n},dn=(e,t)=>{const{goal:n,current:r}=e,{level:a,asc:o}=r,{level:l,asc:i}=t,u=Object.assign(Object.assign({},e),{goal:l>=a&&i>=o?t:r});un(u)},pn=()=>{},mn=e.forwardRef((({bsPrefix:e,name:t,className:n,checked:r,type:a,onChange:o,value:l,disabled:i,id:u,inputRef:s,...c},f)=>(e=C(e,"btn-check"),(0,k.jsxs)(k.Fragment,{children:[(0,k.jsx)("input",{className:e,name:t,type:a,value:l,ref:s,autoComplete:"off",checked:!!r,disabled:!!i,onChange:o||pn,id:u}),(0,k.jsx)(A,{...c,ref:f,className:w()(n,i&&"disabled"),type:void 0,as:"label",htmlFor:u})]}))));mn.displayName="ToggleButton";const hn=mn,vn=function(){const[t,n]=(0,e.useState)((()=>!0)),[r,a]=(0,e.useState)((()=>cn[0]));return e.createElement("div",null,e.createElement(N,null,e.createElement(j,null,"批量设置角色目标信息",e.createElement(hn,{className:"mb-2",id:"toggle-check-character",type:"checkbox",variant:"outline-primary",checked:t,value:"0",onChange:e=>n(e.currentTarget.checked)},"仅激活角色"))),e.createElement(N,null,e.createElement(j,null,"角色目标等级:",e.createElement(be.Select,{onChange:e=>{a(cn[e.target.value])},defaultValue:0,className:"character-level-goal-select"},cn.map(((t,n)=>e.createElement("option",{value:n,key:n},t.text.replace("A","破")))))),e.createElement(j,null,e.createElement(A,{onClick:()=>{var e,n;console.log("批量设置角色目标等级"),console.log(t),console.log(r),e=!t,n=r,on().filter((e=>"character"==e.type)).filter((t=>e||!ln().includes(t.character))).map((e=>dn(e,n))),alert("角色目标等级设置完毕")}},"批量设置角色目标等级"))))},gn=function(){const[t,n]=(0,e.useState)((()=>!0)),[r,a]=(0,e.useState)({normal:1,skill:1,burst:1}),o=[1,2,3,4,5,6,7,8,9,10];return e.createElement("div",null,e.createElement(N,null,e.createElement(j,null,"批量设置角色目标天赋",e.createElement(hn,{className:"mb-2",id:"toggle-check-talent",type:"checkbox",variant:"outline-primary",checked:t,value:"0",onChange:e=>n(e.currentTarget.checked)},"仅激活角色"))),e.createElement(N,null,e.createElement(j,null,"普通攻击目标等级:",e.createElement(be.Select,{onChange:e=>a(Object.assign(Object.assign({},r),{normal:+e.target.value})),className:"character-level-goal-select"},o.map((t=>e.createElement("option",{value:t,key:t},t))))),e.createElement(j,null,"元素战技目标等级:",e.createElement(be.Select,{onChange:e=>a(Object.assign(Object.assign({},r),{skill:+e.target.value})),className:"character-level-goal-select"},o.map((t=>e.createElement("option",{value:t,key:t},t))))),e.createElement(j,null,"元素爆发目标等级:",e.createElement(be.Select,{onChange:e=>a(Object.assign(Object.assign({},r),{burst:+e.target.value})),className:"character-level-goal-select"},o.map((t=>e.createElement("option",{value:t,key:t},t))))),e.createElement(j,null,e.createElement(A,{onClick:()=>{console.log("批量设置角色目标天赋"),console.log(r);const{normal:e,skill:n,burst:a}=r;console.log(t),((e,t,n,r)=>{console.log(on().filter((e=>"talent"==e.type))),on().filter((e=>"talent"==e.type)).filter((t=>e||!ln().includes(t.character))).map((e=>((e,t=9,n=9,r=9)=>{const{normal:{current:a},skill:{current:o},burst:{current:l}}=e,i=Object.assign(Object.assign({},e),{normal:{current:a,goal:a>t?a:t},skill:{current:o,goal:o>n?o:n},burst:{current:l,goal:l>r?l:r}});un(i)})(e,t,n,r)))})(!t,e,n,a),alert("角色目标天赋设置完毕")}},"批量设置角色目标天赋"))))},yn=function(){const[t,n]=(0,e.useState)((()=>!0)),[r,a]=(0,e.useState)((()=>cn[0]));return e.createElement("div",null,e.createElement(N,null,e.createElement(j,null,"批量设置武器目标信息",e.createElement(hn,{className:"mb-2",id:"toggle-check-weapon",type:"checkbox",variant:"outline-primary",checked:t,value:"0",onChange:e=>n(e.currentTarget.checked)},"仅激活武器"))),e.createElement(N,null,e.createElement(j,null,"武器目标等级:",e.createElement(be.Select,{onChange:e=>{a(cn[e.target.value])},defaultValue:0,className:"weapon-level-goal-select"},cn.map(((t,n)=>e.createElement("option",{value:n,key:n},t.text.replace("A","破")))))),e.createElement(j,null,e.createElement(A,{onClick:()=>{var e,n;console.log("批量设置武器目标等级"),console.log(r),e=!t,n=r,on().filter((e=>"weapon"==e.type)).filter((t=>e||!ln().includes(t.weapon))).map((e=>dn(e,n))),alert("武器目标等级设置完毕")}},"批量设置武器目标等级"))))};var bn=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function l(e){try{u(r.next(e))}catch(e){o(e)}}function i(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,i)}u((r=r.apply(e,t||[])).next())}))};function wn(e){return new Promise(((t,n)=>{GM_xmlhttpRequest({method:"GET",url:e,onload:e=>{if(200==e.status){const r=JSON.parse(e.responseText),{retcode:a,message:o,data:l}=r;0===a?t(l):n(o)}else n(e.responseText)},onerror:e=>{n(e)}})}))}const kn=(e,t)=>bn(void 0,void 0,void 0,(function*(){var n,r;const a=(yield((e,t)=>bn(void 0,void 0,void 0,(function*(){const{list:n}=yield function(e,t){return new Promise(((n,r)=>{GM_xmlhttpRequest({method:"POST",url:"https://api-takumi.mihoyo.com/event/e20200928calculate/v1/sync/avatar/list",data:JSON.stringify({element_attr_ids:[],weapon_cat_ids:[],page:1,size:50,uid:e,region:t}),onload:e=>{if(200==e.status){const t=JSON.parse(e.responseText),{retcode:a,message:o,data:l}=t;0===a?n(l):r(o)}else r(e.responseText)},onerror:e=>{r(e)}})}))}(e,t);return n})))(e,t)).map((n=>((e,t,n)=>bn(void 0,void 0,void 0,(function*(){const{id:r}=e,a=`?avatar_id=${r}&uid=${t}&region=${n}`;let o=yield wn("https://api-takumi.mihoyo.com/event/e20200928calculate/v1/sync/avatar/detail"+a);return Object.assign({character:e},o)})))(n,e,t))),o=[];try{for(var l,i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,a){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,a,(t=e[n](t)).done,t.value)}))}}}(a);!(l=yield i.next()).done;){let e=l.value;o.push(e)}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=i.return)&&(yield r.call(i))}finally{if(n)throw n.error}}return o})),En=function(){const[t,n]=(0,e.useState)([]),[r,a]=(0,e.useState)(),[o,l]=(0,e.useState)("character");return e.createElement("div",{className:"ex-dialog"},"这里是SeelieEX操作界面",e.createElement(N,null,e.createElement(j,null,e.createElement(A,{onClick:()=>{bn(void 0,void 0,void 0,(function*(){try{const{list:e}=yield wn("https://api-takumi.mihoyo.com/binding/api/getUserGameRolesByCookie?game_biz=hk4e_cn");return e}catch(e){return console.error(e),alert("请确认已登录活动页面且绑定原神账户!"),GM_openInTab("https://webstatic.mihoyo.com/ys/event/e20210122-slime/index.html"),[]}})).then((e=>{const t=e;n(t),t.length>0&&a(t[0])})).catch((e=>{console.error(e),console.error("账户信息获取失败"),alert("账户信息获取失败")}))}},"获取账户信息"))),e.createElement(N,null,e.createElement(j,null,"账户选择:"),e.createElement(j,null,e.createElement(be.Select,{onSelect:e=>{a(t[e.target.value])},className:"role-select"},t.map(((t,n)=>e.createElement("option",{value:n,key:n},t.game_uid,"(",t.region,")"))))),e.createElement(j,null,e.createElement(A,{onClick:()=>{if(!r)return console.error("账户信息获取失败"),void alert("账户信息获取失败");console.log("开始同步角色信息");const{game_uid:e,region:t}=r;kn(e,t).then((e=>{console.group("返回数据"),console.groupCollapsed("角色"),console.table(e.map((e=>e.character))),console.groupEnd(),console.groupCollapsed("武器"),console.table(e.map((e=>e.weapon))),console.groupEnd(),console.groupCollapsed("角色天赋"),e.forEach((e=>{const t=e.character.name;console.groupCollapsed(t),console.table(e.skill_list),console.groupEnd()})),console.groupEnd(),console.groupEnd(),e.forEach((e=>{!function(e){const{character:t,skill_list:n,weapon:r}=e,{name:a,element_attr_id:o}=t;if(r){const{name:e,level_current:t}=r,n=(e=>{for(let t of rn){const{id:n,name:r}=t;if(e==r)return n}return console.error(`getWeaponrId ${e} 查询失败`),""})(e);console.log(n,e),n&&sn(t,n,e,"weapon")}const{level_current:l}=t,i=(e=>{for(let t of nn){const{id:n,name:r}=t;if(e==r)return n}return console.error(`getCharacterId ${e} 查询失败`),""})(a);if(!i)return;sn(l,i,a,"character");let u=i;"traveler"==i&&(u=`traveler_${(e=>{for(let t of an){const{element_attr_id:n,name:r}=t;if(e==n)return r}return console.error(`getElementAttrName: ${e} 查询失败`),""})(o)}`),((e,t)=>{const n=on(),r=n.map((e=>e.id)),a=Math.max(...r)+1||1,o=n.findIndex((t=>"talent"==t.type&&t.character==e)),[l,i,u]=t.filter((e=>10==e.max_level)).sort().map((e=>e.level_current));let s;if(console.log(e,[l,i,u]),o<0)s={type:"talent",character:e,c3:!1,c5:!1,normal:{current:l,goal:l},skill:{current:i,goal:i},burst:{current:u,goal:u},id:a};else{const e=n[o],{normal:t,skill:r,burst:a}=e,{goal:c}=t,{goal:f}=r,{goal:d}=a;s=Object.assign(Object.assign({},e),{normal:{current:l,goal:l>c?l:c},skill:{current:i,goal:i>f?i:f},burst:{current:u,goal:u>d?u:d}})}un(s)})(u,n)}(e)})),alert("角色信息同步完毕")}))}},"同步mihoyo角色信息"))),e.createElement(N,null,e.createElement(j,null,e.createElement(qt,{id:"controlled-tab-example",activeKey:o,onSelect:e=>l(e),className:"mb-3"},e.createElement(tn,{eventKey:"character",title:"批量设置角色目标等级"},e.createElement(vn,null)),e.createElement(tn,{eventKey:"talent",title:"批量设置角色目标天赋"},e.createElement(gn,null)),e.createElement(tn,{eventKey:"weapon",title:"批量设置武器目标等级"},e.createElement(yn,null))))))};var xn;let Sn=document.createElement("div");Sn.id="seelieEx",Sn.className="flex",null===(xn=document.getElementById("app"))||void 0===xn||xn.append(Sn),t.render(e.createElement(e.StrictMode,null,e.createElement((function(){const[t,n]=(0,e.useState)((()=>!1)),r=e.useRef(null);return e.createElement("div",{className:"App"},e.createElement(a(),{nodeRef:r},e.createElement("div",{ref:r,className:"float-btn",onClick:()=>n(!t)},"SeelieEX")),e.createElement("div",{style:{display:t?"":"none"}},e.createElement(En,null)))}),null)),document.getElementById("seelieEx"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,